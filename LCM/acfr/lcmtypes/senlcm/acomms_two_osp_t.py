"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import senlcm.acomms_osp_t

class acomms_two_osp_t(object):
    __slots__ = ["utime", "current", "last"]

    def __init__(self):
        self.utime = 0
        self.current = senlcm.acomms_osp_t()
        self.last = senlcm.acomms_osp_t()

    def encode(self):
        buf = BytesIO()
        buf.write(acomms_two_osp_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.utime))
        assert self.current._get_packed_fingerprint() == senlcm.acomms_osp_t._get_packed_fingerprint()
        self.current._encode_one(buf)
        assert self.last._get_packed_fingerprint() == senlcm.acomms_osp_t._get_packed_fingerprint()
        self.last._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != acomms_two_osp_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return acomms_two_osp_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = acomms_two_osp_t()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        self.current = senlcm.acomms_osp_t._decode_one(buf)
        self.last = senlcm.acomms_osp_t._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if acomms_two_osp_t in parents: return 0
        newparents = parents + [acomms_two_osp_t]
        tmphash = (0xbb554f2cc3704b7a+ senlcm.acomms_osp_t._get_hash_recursive(newparents)+ senlcm.acomms_osp_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if acomms_two_osp_t._packed_fingerprint is None:
            acomms_two_osp_t._packed_fingerprint = struct.pack(">Q", acomms_two_osp_t._get_hash_recursive([]))
        return acomms_two_osp_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

