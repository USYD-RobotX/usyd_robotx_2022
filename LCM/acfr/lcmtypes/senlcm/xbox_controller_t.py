"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class xbox_controller_t(object):
    __slots__ = ["utime", "l_stick_x", "l_stick_y", "l_stick_btn", "r_stick_x", "r_stick_y", "r_stick_btn", "l_trig", "r_trig", "l_bump", "r_bump", "xbox_btn", "back_btn", "start_btn", "a_btn", "b_btn", "x_btn", "y_btn", "dpad_u", "dpad_d", "dpad_l", "dpad_r"]

    AXIS_MAX = 32767
    AXIS_MIN = -32767
    STICK_NEUTRAL = 0
    TRIG_NEUTRAL = -32767

    def __init__(self):
        self.utime = 0
        self.l_stick_x = 0
        self.l_stick_y = 0
        self.l_stick_btn = False
        self.r_stick_x = 0
        self.r_stick_y = 0
        self.r_stick_btn = False
        self.l_trig = 0
        self.r_trig = 0
        self.l_bump = False
        self.r_bump = False
        self.xbox_btn = False
        self.back_btn = False
        self.start_btn = False
        self.a_btn = False
        self.b_btn = False
        self.x_btn = False
        self.y_btn = False
        self.dpad_u = False
        self.dpad_d = False
        self.dpad_l = False
        self.dpad_r = False

    def encode(self):
        buf = BytesIO()
        buf.write(xbox_controller_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qiibiibiibbbbbbbbbbbbb", self.utime, self.l_stick_x, self.l_stick_y, self.l_stick_btn, self.r_stick_x, self.r_stick_y, self.r_stick_btn, self.l_trig, self.r_trig, self.l_bump, self.r_bump, self.xbox_btn, self.back_btn, self.start_btn, self.a_btn, self.b_btn, self.x_btn, self.y_btn, self.dpad_u, self.dpad_d, self.dpad_l, self.dpad_r))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != xbox_controller_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return xbox_controller_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = xbox_controller_t()
        self.utime, self.l_stick_x, self.l_stick_y = struct.unpack(">qii", buf.read(16))
        self.l_stick_btn = bool(struct.unpack('b', buf.read(1))[0])
        self.r_stick_x, self.r_stick_y = struct.unpack(">ii", buf.read(8))
        self.r_stick_btn = bool(struct.unpack('b', buf.read(1))[0])
        self.l_trig, self.r_trig = struct.unpack(">ii", buf.read(8))
        self.l_bump = bool(struct.unpack('b', buf.read(1))[0])
        self.r_bump = bool(struct.unpack('b', buf.read(1))[0])
        self.xbox_btn = bool(struct.unpack('b', buf.read(1))[0])
        self.back_btn = bool(struct.unpack('b', buf.read(1))[0])
        self.start_btn = bool(struct.unpack('b', buf.read(1))[0])
        self.a_btn = bool(struct.unpack('b', buf.read(1))[0])
        self.b_btn = bool(struct.unpack('b', buf.read(1))[0])
        self.x_btn = bool(struct.unpack('b', buf.read(1))[0])
        self.y_btn = bool(struct.unpack('b', buf.read(1))[0])
        self.dpad_u = bool(struct.unpack('b', buf.read(1))[0])
        self.dpad_d = bool(struct.unpack('b', buf.read(1))[0])
        self.dpad_l = bool(struct.unpack('b', buf.read(1))[0])
        self.dpad_r = bool(struct.unpack('b', buf.read(1))[0])
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if xbox_controller_t in parents: return 0
        tmphash = (0x974649c312043026) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if xbox_controller_t._packed_fingerprint is None:
            xbox_controller_t._packed_fingerprint = struct.pack(">Q", xbox_controller_t._get_hash_recursive([]))
        return xbox_controller_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

