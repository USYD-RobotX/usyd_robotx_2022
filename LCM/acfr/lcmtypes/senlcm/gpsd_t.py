"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class gpsd_t(object):
    __slots__ = ["utime", "online", "fix_utime", "mode", "ept", "latitude", "longitude", "altitude", "eph", "epv", "track", "epd", "speed", "eps", "climb", "epc", "geoidal_separation", "status", "satellites_used", "used", "pdop", "hdop", "tdop", "gdop", "epe", "satellites_visible", "PRN", "elevation", "azimuth", "ss", "gps_device", "gps_id", "ndevices", "devicelist"]

    MODE_NOT_SEEN = 0
    MODE_NO_FIX = 1
    MODE_2D = 2
    MODE_3D = 3
    STATUS_NO_FIX = 0
    STATUS_FIX = 1
    STATUS_DGPS_FIX = 2

    def __init__(self):
        self.utime = 0
        self.online = 0
        self.fix_utime = 0
        self.mode = 0
        self.ept = 0.0
        self.latitude = 0.0
        self.longitude = 0.0
        self.altitude = 0.0
        self.eph = 0.0
        self.epv = 0.0
        self.track = 0.0
        self.epd = 0.0
        self.speed = 0.0
        self.eps = 0.0
        self.climb = 0.0
        self.epc = 0.0
        self.geoidal_separation = 0.0
        self.status = 0
        self.satellites_used = 0
        self.used = []
        self.pdop = 0.0
        self.hdop = 0.0
        self.tdop = 0.0
        self.gdop = 0.0
        self.epe = 0.0
        self.satellites_visible = 0
        self.PRN = []
        self.elevation = []
        self.azimuth = []
        self.ss = []
        self.gps_device = ""
        self.gps_id = ""
        self.ndevices = 0
        self.devicelist = []

    def encode(self):
        buf = BytesIO()
        buf.write(gpsd_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qqqbdddddddddddddhh", self.utime, self.online, self.fix_utime, self.mode, self.ept, self.latitude, self.longitude, self.altitude, self.eph, self.epv, self.track, self.epd, self.speed, self.eps, self.climb, self.epc, self.geoidal_separation, self.status, self.satellites_used))
        buf.write(struct.pack('>%dh' % self.satellites_used, *self.used[:self.satellites_used]))
        buf.write(struct.pack(">dddddh", self.pdop, self.hdop, self.tdop, self.gdop, self.epe, self.satellites_visible))
        buf.write(struct.pack('>%dh' % self.satellites_visible, *self.PRN[:self.satellites_visible]))
        buf.write(struct.pack('>%dh' % self.satellites_visible, *self.elevation[:self.satellites_visible]))
        buf.write(struct.pack('>%dh' % self.satellites_visible, *self.azimuth[:self.satellites_visible]))
        buf.write(struct.pack('>%dh' % self.satellites_visible, *self.ss[:self.satellites_visible]))
        __gps_device_encoded = self.gps_device.encode('utf-8')
        buf.write(struct.pack('>I', len(__gps_device_encoded)+1))
        buf.write(__gps_device_encoded)
        buf.write(b"\0")
        __gps_id_encoded = self.gps_id.encode('utf-8')
        buf.write(struct.pack('>I', len(__gps_id_encoded)+1))
        buf.write(__gps_id_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">h", self.ndevices))
        for i0 in range(self.ndevices):
            __devicelist_encoded = self.devicelist[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__devicelist_encoded)+1))
            buf.write(__devicelist_encoded)
            buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != gpsd_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return gpsd_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = gpsd_t()
        self.utime, self.online, self.fix_utime, self.mode, self.ept, self.latitude, self.longitude, self.altitude, self.eph, self.epv, self.track, self.epd, self.speed, self.eps, self.climb, self.epc, self.geoidal_separation, self.status, self.satellites_used = struct.unpack(">qqqbdddddddddddddhh", buf.read(133))
        self.used = struct.unpack('>%dh' % self.satellites_used, buf.read(self.satellites_used * 2))
        self.pdop, self.hdop, self.tdop, self.gdop, self.epe, self.satellites_visible = struct.unpack(">dddddh", buf.read(42))
        self.PRN = struct.unpack('>%dh' % self.satellites_visible, buf.read(self.satellites_visible * 2))
        self.elevation = struct.unpack('>%dh' % self.satellites_visible, buf.read(self.satellites_visible * 2))
        self.azimuth = struct.unpack('>%dh' % self.satellites_visible, buf.read(self.satellites_visible * 2))
        self.ss = struct.unpack('>%dh' % self.satellites_visible, buf.read(self.satellites_visible * 2))
        __gps_device_len = struct.unpack('>I', buf.read(4))[0]
        self.gps_device = buf.read(__gps_device_len)[:-1].decode('utf-8', 'replace')
        __gps_id_len = struct.unpack('>I', buf.read(4))[0]
        self.gps_id = buf.read(__gps_id_len)[:-1].decode('utf-8', 'replace')
        self.ndevices = struct.unpack(">h", buf.read(2))[0]
        self.devicelist = []
        for i0 in range(self.ndevices):
            __devicelist_len = struct.unpack('>I', buf.read(4))[0]
            self.devicelist.append(buf.read(__devicelist_len)[:-1].decode('utf-8', 'replace'))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if gpsd_t in parents: return 0
        tmphash = (0x2cdd4d19fc5d0f5) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if gpsd_t._packed_fingerprint is None:
            gpsd_t._packed_fingerprint = struct.pack(">Q", gpsd_t._get_hash_recursive([]))
        return gpsd_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

