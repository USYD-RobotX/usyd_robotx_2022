"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class acomms_data_t(object):
    __slots__ = ["utime", "time_source", "src", "dest", "rate", "type", "max_num_frames", "max_frame_bytes", "frame_size", "frame"]

    MODEM_TIME = 0
    GOBY_TIME = 1
    UNKNOWN = 0
    DATA = 1
    ACK = 2
    MINI_DATA = 3
    TWO_WAY_PING = 4
    REMUS_LBL_RANGING = 5
    NARROWBAND_LBL_RANGING = 6

    def __init__(self):
        self.utime = 0
        self.time_source = 0
        self.src = 0
        self.dest = 0
        self.rate = 0
        self.type = 0
        self.max_num_frames = 0
        self.max_frame_bytes = 0
        self.frame_size = 0
        self.frame = []

    def encode(self):
        buf = BytesIO()
        buf.write(acomms_data_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qbbbbbiii", self.utime, self.time_source, self.src, self.dest, self.rate, self.type, self.max_num_frames, self.max_frame_bytes, self.frame_size))
        for i0 in range(self.frame_size):
            __frame_encoded = self.frame[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__frame_encoded)+1))
            buf.write(__frame_encoded)
            buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != acomms_data_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return acomms_data_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = acomms_data_t()
        self.utime, self.time_source, self.src, self.dest, self.rate, self.type, self.max_num_frames, self.max_frame_bytes, self.frame_size = struct.unpack(">qbbbbbiii", buf.read(25))
        self.frame = []
        for i0 in range(self.frame_size):
            __frame_len = struct.unpack('>I', buf.read(4))[0]
            self.frame.append(buf.read(__frame_len)[:-1].decode('utf-8', 'replace'))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if acomms_data_t in parents: return 0
        tmphash = (0x495a8f901df2c76a) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if acomms_data_t._packed_fingerprint is None:
            acomms_data_t._packed_fingerprint = struct.pack(">Q", acomms_data_t._get_hash_recursive([]))
        return acomms_data_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

