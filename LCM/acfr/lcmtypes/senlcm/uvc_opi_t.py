"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class uvc_opi_t(object):
    __slots__ = ["utime", "percent", "remaining_cap", "pwr", "volts", "current", "time_til", "batt_state", "leak"]

    BS_CHARGING = 1
    BS_DISCHARGING = 2
    BS_FAULT = 3
    NOLEAK = 0
    LEAK = 1

    def __init__(self):
        self.utime = 0
        self.percent = 0.0
        self.remaining_cap = 0.0
        self.pwr = 0.0
        self.volts = 0.0
        self.current = 0.0
        self.time_til = 0.0
        self.batt_state = 0
        self.leak = 0

    def encode(self):
        buf = BytesIO()
        buf.write(uvc_opi_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qddddddii", self.utime, self.percent, self.remaining_cap, self.pwr, self.volts, self.current, self.time_til, self.batt_state, self.leak))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != uvc_opi_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return uvc_opi_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = uvc_opi_t()
        self.utime, self.percent, self.remaining_cap, self.pwr, self.volts, self.current, self.time_til, self.batt_state, self.leak = struct.unpack(">qddddddii", buf.read(64))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if uvc_opi_t in parents: return 0
        tmphash = (0x15a2b44826729a41) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if uvc_opi_t._packed_fingerprint is None:
            uvc_opi_t._packed_fingerprint = struct.pack(">Q", uvc_opi_t._get_hash_recursive([]))
        return uvc_opi_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

