"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class rt3202_t(object):
    __slots__ = ["utime", "data_time", "lat", "lon", "alt", "r", "p", "h", "vn", "ve", "vd", "ax", "ay", "az", "arx", "ary", "arz"]

    def __init__(self):
        self.utime = 0
        self.data_time = 0
        self.lat = 0.0
        self.lon = 0.0
        self.alt = 0.0
        self.r = 0.0
        self.p = 0.0
        self.h = 0.0
        self.vn = 0.0
        self.ve = 0.0
        self.vd = 0.0
        self.ax = 0.0
        self.ay = 0.0
        self.az = 0.0
        self.arx = 0.0
        self.ary = 0.0
        self.arz = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(rt3202_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qiddddddddddddddd", self.utime, self.data_time, self.lat, self.lon, self.alt, self.r, self.p, self.h, self.vn, self.ve, self.vd, self.ax, self.ay, self.az, self.arx, self.ary, self.arz))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != rt3202_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return rt3202_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = rt3202_t()
        self.utime, self.data_time, self.lat, self.lon, self.alt, self.r, self.p, self.h, self.vn, self.ve, self.vd, self.ax, self.ay, self.az, self.arx, self.ary, self.arz = struct.unpack(">qiddddddddddddddd", buf.read(132))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if rt3202_t in parents: return 0
        tmphash = (0xa38fbba79dca252d) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if rt3202_t._packed_fingerprint is None:
            rt3202_t._packed_fingerprint = struct.pack(">Q", rt3202_t._get_hash_recursive([]))
        return rt3202_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

