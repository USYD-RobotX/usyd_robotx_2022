"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class gpsd3_dop_t(object):
    __slots__ = ["xdop", "ydop", "pdop", "hdop", "vdop", "tdop", "gdop"]

    def __init__(self):
        self.xdop = 0.0
        self.ydop = 0.0
        self.pdop = 0.0
        self.hdop = 0.0
        self.vdop = 0.0
        self.tdop = 0.0
        self.gdop = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(gpsd3_dop_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ddddddd", self.xdop, self.ydop, self.pdop, self.hdop, self.vdop, self.tdop, self.gdop))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != gpsd3_dop_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return gpsd3_dop_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = gpsd3_dop_t()
        self.xdop, self.ydop, self.pdop, self.hdop, self.vdop, self.tdop, self.gdop = struct.unpack(">ddddddd", buf.read(56))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if gpsd3_dop_t in parents: return 0
        tmphash = (0x6172e29c8a5420c3) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if gpsd3_dop_t._packed_fingerprint is None:
            gpsd3_dop_t._packed_fingerprint = struct.pack(">Q", gpsd3_dop_t._get_hash_recursive([]))
        return gpsd3_dop_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

