"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class subsonus_system_state_t(object):
    __slots__ = ["utime", "system_status", "filter_status", "unix_seconds", "microseconds", "latitude", "longitude", "height", "velocity_ned", "body_acceleration", "g_force", "rpy", "angular_velocity", "position_standard_deviation", "orientation_standard_deviation"]

    def __init__(self):
        self.utime = 0
        self.system_status = 0
        self.filter_status = 0
        self.unix_seconds = 0
        self.microseconds = 0
        self.latitude = 0.0
        self.longitude = 0.0
        self.height = 0.0
        self.velocity_ned = [ 0.0 for dim0 in range(3) ]
        self.body_acceleration = [ 0.0 for dim0 in range(3) ]
        self.g_force = 0.0
        self.rpy = [ 0.0 for dim0 in range(3) ]
        self.angular_velocity = [ 0.0 for dim0 in range(3) ]
        self.position_standard_deviation = [ 0.0 for dim0 in range(3) ]
        self.orientation_standard_deviation = [ 0.0 for dim0 in range(3) ]

    def encode(self):
        buf = BytesIO()
        buf.write(subsonus_system_state_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qiiiiddd", self.utime, self.system_status, self.filter_status, self.unix_seconds, self.microseconds, self.latitude, self.longitude, self.height))
        buf.write(struct.pack('>3f', *self.velocity_ned[:3]))
        buf.write(struct.pack('>3f', *self.body_acceleration[:3]))
        buf.write(struct.pack(">f", self.g_force))
        buf.write(struct.pack('>3f', *self.rpy[:3]))
        buf.write(struct.pack('>3f', *self.angular_velocity[:3]))
        buf.write(struct.pack('>3f', *self.position_standard_deviation[:3]))
        buf.write(struct.pack('>3f', *self.orientation_standard_deviation[:3]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != subsonus_system_state_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return subsonus_system_state_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = subsonus_system_state_t()
        self.utime, self.system_status, self.filter_status, self.unix_seconds, self.microseconds, self.latitude, self.longitude, self.height = struct.unpack(">qiiiiddd", buf.read(48))
        self.velocity_ned = struct.unpack('>3f', buf.read(12))
        self.body_acceleration = struct.unpack('>3f', buf.read(12))
        self.g_force = struct.unpack(">f", buf.read(4))[0]
        self.rpy = struct.unpack('>3f', buf.read(12))
        self.angular_velocity = struct.unpack('>3f', buf.read(12))
        self.position_standard_deviation = struct.unpack('>3f', buf.read(12))
        self.orientation_standard_deviation = struct.unpack('>3f', buf.read(12))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if subsonus_system_state_t in parents: return 0
        tmphash = (0xfe81d012c7339811) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if subsonus_system_state_t._packed_fingerprint is None:
            subsonus_system_state_t._packed_fingerprint = struct.pack(">Q", subsonus_system_state_t._get_hash_recursive([]))
        return subsonus_system_state_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

