"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import senlcm.gpsd3_devconfig_t

import senlcm.gpsd3_ned_t

import senlcm.gpsd3_ecef_t

import senlcm.gpsd3_fix_t

import senlcm.gpsd3_dop_t

class gpsd3_t(object):
    __slots__ = ["utime", "online", "fix", "geoidal_separation", "status", "satellites_used", "used", "dop", "epe", "skyview_utime", "satellites_visible", "PRN", "elevation", "azimuth", "ss", "dev", "ned", "ecef", "tag"]

    STATUS_NO_FIX = 0
    STATUS_FIX = 1
    STATUS_DGPS_FIX = 2

    def __init__(self):
        self.utime = 0
        self.online = 0
        self.fix = senlcm.gpsd3_fix_t()
        self.geoidal_separation = 0.0
        self.status = 0
        self.satellites_used = 0
        self.used = []
        self.dop = senlcm.gpsd3_dop_t()
        self.epe = 0.0
        self.skyview_utime = 0.0
        self.satellites_visible = 0
        self.PRN = []
        self.elevation = []
        self.azimuth = []
        self.ss = []
        self.dev = senlcm.gpsd3_devconfig_t()
        self.ned = senlcm.gpsd3_ned_t()
        self.ecef = senlcm.gpsd3_ecef_t()
        self.tag = ""

    def encode(self):
        buf = BytesIO()
        buf.write(gpsd3_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qq", self.utime, self.online))
        assert self.fix._get_packed_fingerprint() == senlcm.gpsd3_fix_t._get_packed_fingerprint()
        self.fix._encode_one(buf)
        buf.write(struct.pack(">dhh", self.geoidal_separation, self.status, self.satellites_used))
        buf.write(struct.pack('>%dh' % self.satellites_used, *self.used[:self.satellites_used]))
        assert self.dop._get_packed_fingerprint() == senlcm.gpsd3_dop_t._get_packed_fingerprint()
        self.dop._encode_one(buf)
        buf.write(struct.pack(">ddh", self.epe, self.skyview_utime, self.satellites_visible))
        buf.write(struct.pack('>%dh' % self.satellites_visible, *self.PRN[:self.satellites_visible]))
        buf.write(struct.pack('>%dh' % self.satellites_visible, *self.elevation[:self.satellites_visible]))
        buf.write(struct.pack('>%dh' % self.satellites_visible, *self.azimuth[:self.satellites_visible]))
        buf.write(struct.pack('>%dh' % self.satellites_visible, *self.ss[:self.satellites_visible]))
        assert self.dev._get_packed_fingerprint() == senlcm.gpsd3_devconfig_t._get_packed_fingerprint()
        self.dev._encode_one(buf)
        assert self.ned._get_packed_fingerprint() == senlcm.gpsd3_ned_t._get_packed_fingerprint()
        self.ned._encode_one(buf)
        assert self.ecef._get_packed_fingerprint() == senlcm.gpsd3_ecef_t._get_packed_fingerprint()
        self.ecef._encode_one(buf)
        __tag_encoded = self.tag.encode('utf-8')
        buf.write(struct.pack('>I', len(__tag_encoded)+1))
        buf.write(__tag_encoded)
        buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != gpsd3_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return gpsd3_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = gpsd3_t()
        self.utime, self.online = struct.unpack(">qq", buf.read(16))
        self.fix = senlcm.gpsd3_fix_t._decode_one(buf)
        self.geoidal_separation, self.status, self.satellites_used = struct.unpack(">dhh", buf.read(12))
        self.used = struct.unpack('>%dh' % self.satellites_used, buf.read(self.satellites_used * 2))
        self.dop = senlcm.gpsd3_dop_t._decode_one(buf)
        self.epe, self.skyview_utime, self.satellites_visible = struct.unpack(">ddh", buf.read(18))
        self.PRN = struct.unpack('>%dh' % self.satellites_visible, buf.read(self.satellites_visible * 2))
        self.elevation = struct.unpack('>%dh' % self.satellites_visible, buf.read(self.satellites_visible * 2))
        self.azimuth = struct.unpack('>%dh' % self.satellites_visible, buf.read(self.satellites_visible * 2))
        self.ss = struct.unpack('>%dh' % self.satellites_visible, buf.read(self.satellites_visible * 2))
        self.dev = senlcm.gpsd3_devconfig_t._decode_one(buf)
        self.ned = senlcm.gpsd3_ned_t._decode_one(buf)
        self.ecef = senlcm.gpsd3_ecef_t._decode_one(buf)
        __tag_len = struct.unpack('>I', buf.read(4))[0]
        self.tag = buf.read(__tag_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if gpsd3_t in parents: return 0
        newparents = parents + [gpsd3_t]
        tmphash = (0xbaa68052bb1fbfb3+ senlcm.gpsd3_fix_t._get_hash_recursive(newparents)+ senlcm.gpsd3_dop_t._get_hash_recursive(newparents)+ senlcm.gpsd3_devconfig_t._get_hash_recursive(newparents)+ senlcm.gpsd3_ned_t._get_hash_recursive(newparents)+ senlcm.gpsd3_ecef_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if gpsd3_t._packed_fingerprint is None:
            gpsd3_t._packed_fingerprint = struct.pack(">Q", gpsd3_t._get_hash_recursive([]))
        return gpsd3_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

