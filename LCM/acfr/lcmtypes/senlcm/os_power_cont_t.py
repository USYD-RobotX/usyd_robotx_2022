"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import senlcm.smartbattery_t

class os_power_cont_t(object):
    __slots__ = ["utime", "current", "power", "avg_charge_p", "capacity", "capacity_full", "minutes_tef", "sys_message", "battery_state", "num_batteries", "battery"]

    def __init__(self):
        self.utime = 0
        self.current = 0.0
        self.power = 0.0
        self.avg_charge_p = 0
        self.capacity = 0.0
        self.capacity_full = 0.0
        self.minutes_tef = 0
        self.sys_message = ""
        self.battery_state = ""
        self.num_batteries = 0
        self.battery = []

    def encode(self):
        buf = BytesIO()
        buf.write(os_power_cont_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qddiddi", self.utime, self.current, self.power, self.avg_charge_p, self.capacity, self.capacity_full, self.minutes_tef))
        __sys_message_encoded = self.sys_message.encode('utf-8')
        buf.write(struct.pack('>I', len(__sys_message_encoded)+1))
        buf.write(__sys_message_encoded)
        buf.write(b"\0")
        __battery_state_encoded = self.battery_state.encode('utf-8')
        buf.write(struct.pack('>I', len(__battery_state_encoded)+1))
        buf.write(__battery_state_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">i", self.num_batteries))
        for i0 in range(self.num_batteries):
            assert self.battery[i0]._get_packed_fingerprint() == senlcm.smartbattery_t._get_packed_fingerprint()
            self.battery[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != os_power_cont_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return os_power_cont_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = os_power_cont_t()
        self.utime, self.current, self.power, self.avg_charge_p, self.capacity, self.capacity_full, self.minutes_tef = struct.unpack(">qddiddi", buf.read(48))
        __sys_message_len = struct.unpack('>I', buf.read(4))[0]
        self.sys_message = buf.read(__sys_message_len)[:-1].decode('utf-8', 'replace')
        __battery_state_len = struct.unpack('>I', buf.read(4))[0]
        self.battery_state = buf.read(__battery_state_len)[:-1].decode('utf-8', 'replace')
        self.num_batteries = struct.unpack(">i", buf.read(4))[0]
        self.battery = []
        for i0 in range(self.num_batteries):
            self.battery.append(senlcm.smartbattery_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if os_power_cont_t in parents: return 0
        newparents = parents + [os_power_cont_t]
        tmphash = (0x4ef157d6dff3049c+ senlcm.smartbattery_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if os_power_cont_t._packed_fingerprint is None:
            os_power_cont_t._packed_fingerprint = struct.pack(">Q", os_power_cont_t._get_hash_recursive([]))
        return os_power_cont_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

