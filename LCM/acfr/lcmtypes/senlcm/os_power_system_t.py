"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import senlcm.os_power_cont_t

class os_power_system_t(object):
    __slots__ = ["utime", "current", "power", "avg_charge_p", "capacity", "capacity_full", "minutes_tef", "num_controllers", "controller"]

    def __init__(self):
        self.utime = 0
        self.current = 0.0
        self.power = 0.0
        self.avg_charge_p = 0
        self.capacity = 0.0
        self.capacity_full = 0.0
        self.minutes_tef = 0
        self.num_controllers = 0
        self.controller = []

    def encode(self):
        buf = BytesIO()
        buf.write(os_power_system_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qddiddii", self.utime, self.current, self.power, self.avg_charge_p, self.capacity, self.capacity_full, self.minutes_tef, self.num_controllers))
        for i0 in range(self.num_controllers):
            assert self.controller[i0]._get_packed_fingerprint() == senlcm.os_power_cont_t._get_packed_fingerprint()
            self.controller[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != os_power_system_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return os_power_system_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = os_power_system_t()
        self.utime, self.current, self.power, self.avg_charge_p, self.capacity, self.capacity_full, self.minutes_tef, self.num_controllers = struct.unpack(">qddiddii", buf.read(52))
        self.controller = []
        for i0 in range(self.num_controllers):
            self.controller.append(senlcm.os_power_cont_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if os_power_system_t in parents: return 0
        newparents = parents + [os_power_system_t]
        tmphash = (0x74b88c002e3b4304+ senlcm.os_power_cont_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if os_power_system_t._packed_fingerprint is None:
            os_power_system_t._packed_fingerprint = struct.pack(">Q", os_power_system_t._get_hash_recursive([]))
        return os_power_system_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

