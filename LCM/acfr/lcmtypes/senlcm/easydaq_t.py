"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import senlcm.relay_t

class easydaq_t(object):
    __slots__ = ["utime", "self", "relay"]

    def __init__(self):
        self.utime = 0
        self.self = False
        self.relay = [ senlcm.relay_t() for dim0 in range(8) ]

    def encode(self):
        buf = BytesIO()
        buf.write(easydaq_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qb", self.utime, self.self))
        for i0 in range(8):
            assert self.relay[i0]._get_packed_fingerprint() == senlcm.relay_t._get_packed_fingerprint()
            self.relay[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != easydaq_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return easydaq_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = easydaq_t()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        self.self = bool(struct.unpack('b', buf.read(1))[0])
        self.relay = []
        for i0 in range(8):
            self.relay.append(senlcm.relay_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if easydaq_t in parents: return 0
        newparents = parents + [easydaq_t]
        tmphash = (0x7222b91c07073254+ senlcm.relay_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if easydaq_t._packed_fingerprint is None:
            easydaq_t._packed_fingerprint = struct.pack(">Q", easydaq_t._get_hash_recursive([]))
        return easydaq_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

