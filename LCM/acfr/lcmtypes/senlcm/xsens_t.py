"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class xsens_t(object):
    __slots__ = ["utime", "count", "heading", "roll", "pitch", "temp", "mag_x", "mag_y", "mag_z", "acc_x", "acc_y", "acc_z", "gyr_x", "gyr_y", "gyr_z"]

    def __init__(self):
        self.utime = 0
        self.count = 0
        self.heading = 0.0
        self.roll = 0.0
        self.pitch = 0.0
        self.temp = 0.0
        self.mag_x = 0.0
        self.mag_y = 0.0
        self.mag_z = 0.0
        self.acc_x = 0.0
        self.acc_y = 0.0
        self.acc_z = 0.0
        self.gyr_x = 0.0
        self.gyr_y = 0.0
        self.gyr_z = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(xsens_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qiddddddddddddd", self.utime, self.count, self.heading, self.roll, self.pitch, self.temp, self.mag_x, self.mag_y, self.mag_z, self.acc_x, self.acc_y, self.acc_z, self.gyr_x, self.gyr_y, self.gyr_z))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != xsens_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return xsens_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = xsens_t()
        self.utime, self.count, self.heading, self.roll, self.pitch, self.temp, self.mag_x, self.mag_y, self.mag_z, self.acc_x, self.acc_y, self.acc_z, self.gyr_x, self.gyr_y, self.gyr_z = struct.unpack(">qiddddddddddddd", buf.read(116))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if xsens_t in parents: return 0
        tmphash = (0xf3eea9ce52565486) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if xsens_t._packed_fingerprint is None:
            xsens_t._packed_fingerprint = struct.pack(">Q", xsens_t._get_hash_recursive([]))
        return xsens_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

