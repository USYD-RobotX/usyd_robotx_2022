"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class gpsd3_fix_t(object):
    __slots__ = ["utime", "mode", "ept", "latitude", "epy", "longitude", "epx", "altitude", "epv", "track", "epd", "speed", "eps", "climb", "epc"]

    MODE_NOT_SEEN = 0
    MODE_NO_FIX = 1
    MODE_2D = 2
    MODE_3D = 3

    def __init__(self):
        self.utime = 0
        self.mode = 0
        self.ept = 0.0
        self.latitude = 0.0
        self.epy = 0.0
        self.longitude = 0.0
        self.epx = 0.0
        self.altitude = 0.0
        self.epv = 0.0
        self.track = 0.0
        self.epd = 0.0
        self.speed = 0.0
        self.eps = 0.0
        self.climb = 0.0
        self.epc = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(gpsd3_fix_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qhddddddddddddd", self.utime, self.mode, self.ept, self.latitude, self.epy, self.longitude, self.epx, self.altitude, self.epv, self.track, self.epd, self.speed, self.eps, self.climb, self.epc))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != gpsd3_fix_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return gpsd3_fix_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = gpsd3_fix_t()
        self.utime, self.mode, self.ept, self.latitude, self.epy, self.longitude, self.epx, self.altitude, self.epv, self.track, self.epd, self.speed, self.eps, self.climb, self.epc = struct.unpack(">qhddddddddddddd", buf.read(114))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if gpsd3_fix_t in parents: return 0
        tmphash = (0x8f9c76cfb80b1617) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if gpsd3_fix_t._packed_fingerprint is None:
            gpsd3_fix_t._packed_fingerprint = struct.pack(">Q", gpsd3_fix_t._get_hash_recursive([]))
        return gpsd3_fix_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

