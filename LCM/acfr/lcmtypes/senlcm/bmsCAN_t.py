"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class bmsCAN_t(object):
    __slots__ = ["utime", "bms", "error", "status", "voltage", "remaining_Ah", "current", "temp", "cell_voltage"]

    def __init__(self):
        self.utime = 0
        self.bms = 0
        self.error = ""
        self.status = ""
        self.voltage = 0.0
        self.remaining_Ah = 0.0
        self.current = 0.0
        self.temp = 0
        self.cell_voltage = [ 0.0 for dim0 in range(16) ]

    def encode(self):
        buf = BytesIO()
        buf.write(bmsCAN_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qh", self.utime, self.bms))
        __error_encoded = self.error.encode('utf-8')
        buf.write(struct.pack('>I', len(__error_encoded)+1))
        buf.write(__error_encoded)
        buf.write(b"\0")
        __status_encoded = self.status.encode('utf-8')
        buf.write(struct.pack('>I', len(__status_encoded)+1))
        buf.write(__status_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">fffB", self.voltage, self.remaining_Ah, self.current, self.temp))
        buf.write(struct.pack('>16f', *self.cell_voltage[:16]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != bmsCAN_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return bmsCAN_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = bmsCAN_t()
        self.utime, self.bms = struct.unpack(">qh", buf.read(10))
        __error_len = struct.unpack('>I', buf.read(4))[0]
        self.error = buf.read(__error_len)[:-1].decode('utf-8', 'replace')
        __status_len = struct.unpack('>I', buf.read(4))[0]
        self.status = buf.read(__status_len)[:-1].decode('utf-8', 'replace')
        self.voltage, self.remaining_Ah, self.current, self.temp = struct.unpack(">fffB", buf.read(13))
        self.cell_voltage = struct.unpack('>16f', buf.read(64))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if bmsCAN_t in parents: return 0
        tmphash = (0x7fde7c9f6d95d2b) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if bmsCAN_t._packed_fingerprint is None:
            bmsCAN_t._packed_fingerprint = struct.pack(">Q", bmsCAN_t._get_hash_recursive([]))
        return bmsCAN_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

