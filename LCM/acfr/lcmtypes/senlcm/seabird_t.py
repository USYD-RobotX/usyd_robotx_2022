"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class seabird_t(object):
    __slots__ = ["utime", "conductivity", "temperature", "pressure", "salinity", "speed_of_sound", "pump"]

    def __init__(self):
        self.utime = 0
        self.conductivity = 0.0
        self.temperature = 0.0
        self.pressure = 0.0
        self.salinity = 0.0
        self.speed_of_sound = 0.0
        self.pump = 0

    def encode(self):
        buf = BytesIO()
        buf.write(seabird_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qdddddb", self.utime, self.conductivity, self.temperature, self.pressure, self.salinity, self.speed_of_sound, self.pump))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != seabird_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return seabird_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = seabird_t()
        self.utime, self.conductivity, self.temperature, self.pressure, self.salinity, self.speed_of_sound, self.pump = struct.unpack(">qdddddb", buf.read(49))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if seabird_t in parents: return 0
        tmphash = (0x4bf82cf8f40600d9) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if seabird_t._packed_fingerprint is None:
            seabird_t._packed_fingerprint = struct.pack(">Q", seabird_t._get_hash_recursive([]))
        return seabird_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

