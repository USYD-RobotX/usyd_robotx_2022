"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class acomms_range_t(object):
    __slots__ = ["utime", "time_source", "src", "nowtt", "owtt", "type", "sender_clk_mode", "receiver_clk_mode"]

    MODEM_TIME = 0
    GOBY_TIME = 1
    ONE_WAY_SYNCHRONOUS = 0
    TWO_WAY_PING = 1
    REMUS_LBL = 2
    NARROWBAND_LBL = 3
    NO_SYNC_TO_PPS_AND_CCCLK_BAD = 0
    NO_SYNC_TO_PPS_AND_CCCLK_GOOD = 1
    SYNC_TO_PPS_AND_CCCLK_BAD = 2
    SYNC_TO_PPS_AND_CCCLK_GOOD = 3
    UNKNOWN = 4

    def __init__(self):
        self.utime = 0
        self.time_source = 0
        self.src = 0
        self.nowtt = 0
        self.owtt = []
        self.type = 0
        self.sender_clk_mode = 0
        self.receiver_clk_mode = 0

    def encode(self):
        buf = BytesIO()
        buf.write(acomms_range_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qbbb", self.utime, self.time_source, self.src, self.nowtt))
        buf.write(struct.pack('>%dd' % self.nowtt, *self.owtt[:self.nowtt]))
        buf.write(struct.pack(">bbb", self.type, self.sender_clk_mode, self.receiver_clk_mode))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != acomms_range_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return acomms_range_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = acomms_range_t()
        self.utime, self.time_source, self.src, self.nowtt = struct.unpack(">qbbb", buf.read(11))
        self.owtt = struct.unpack('>%dd' % self.nowtt, buf.read(self.nowtt * 8))
        self.type, self.sender_clk_mode, self.receiver_clk_mode = struct.unpack(">bbb", buf.read(3))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if acomms_range_t in parents: return 0
        tmphash = (0xba0f7036dd647b23) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if acomms_range_t._packed_fingerprint is None:
            acomms_range_t._packed_fingerprint = struct.pack(">Q", acomms_range_t._get_hash_recursive([]))
        return acomms_range_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

