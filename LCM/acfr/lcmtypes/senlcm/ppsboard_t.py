"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class ppsboard_t(object):
    __slots__ = ["utime", "ntp_time", "ntp_status", "src_type", "src_pps", "sync_mode", "sync_num", "sync_date", "sync_time", "offset_counts", "offset_usecs", "temperature"]

    def __init__(self):
        self.utime = 0
        self.ntp_time = ""
        self.ntp_status = False
        self.src_type = ""
        self.src_pps = False
        self.sync_mode = 0
        self.sync_num = 0
        self.sync_date = ""
        self.sync_time = ""
        self.offset_counts = 0
        self.offset_usecs = 0.0
        self.temperature = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(ppsboard_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.utime))
        __ntp_time_encoded = self.ntp_time.encode('utf-8')
        buf.write(struct.pack('>I', len(__ntp_time_encoded)+1))
        buf.write(__ntp_time_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">b", self.ntp_status))
        __src_type_encoded = self.src_type.encode('utf-8')
        buf.write(struct.pack('>I', len(__src_type_encoded)+1))
        buf.write(__src_type_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">bhh", self.src_pps, self.sync_mode, self.sync_num))
        __sync_date_encoded = self.sync_date.encode('utf-8')
        buf.write(struct.pack('>I', len(__sync_date_encoded)+1))
        buf.write(__sync_date_encoded)
        buf.write(b"\0")
        __sync_time_encoded = self.sync_time.encode('utf-8')
        buf.write(struct.pack('>I', len(__sync_time_encoded)+1))
        buf.write(__sync_time_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">hdd", self.offset_counts, self.offset_usecs, self.temperature))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ppsboard_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ppsboard_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ppsboard_t()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        __ntp_time_len = struct.unpack('>I', buf.read(4))[0]
        self.ntp_time = buf.read(__ntp_time_len)[:-1].decode('utf-8', 'replace')
        self.ntp_status = bool(struct.unpack('b', buf.read(1))[0])
        __src_type_len = struct.unpack('>I', buf.read(4))[0]
        self.src_type = buf.read(__src_type_len)[:-1].decode('utf-8', 'replace')
        self.src_pps = bool(struct.unpack('b', buf.read(1))[0])
        self.sync_mode, self.sync_num = struct.unpack(">hh", buf.read(4))
        __sync_date_len = struct.unpack('>I', buf.read(4))[0]
        self.sync_date = buf.read(__sync_date_len)[:-1].decode('utf-8', 'replace')
        __sync_time_len = struct.unpack('>I', buf.read(4))[0]
        self.sync_time = buf.read(__sync_time_len)[:-1].decode('utf-8', 'replace')
        self.offset_counts, self.offset_usecs, self.temperature = struct.unpack(">hdd", buf.read(18))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ppsboard_t in parents: return 0
        tmphash = (0x538d2ca386703a6c) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ppsboard_t._packed_fingerprint is None:
            ppsboard_t._packed_fingerprint = struct.pack(">Q", ppsboard_t._get_hash_recursive([]))
        return ppsboard_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

