"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import senlcm.evologics_ping_target_t

class evologics_ping_status_t(object):
    __slots__ = ["utime", "modem_name", "modem_id", "target_count", "targets"]

    def __init__(self):
        self.utime = 0
        self.modem_name = ""
        self.modem_id = 0
        self.target_count = 0
        self.targets = []

    def encode(self):
        buf = BytesIO()
        buf.write(evologics_ping_status_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.utime))
        __modem_name_encoded = self.modem_name.encode('utf-8')
        buf.write(struct.pack('>I', len(__modem_name_encoded)+1))
        buf.write(__modem_name_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">bb", self.modem_id, self.target_count))
        for i0 in range(self.target_count):
            assert self.targets[i0]._get_packed_fingerprint() == senlcm.evologics_ping_target_t._get_packed_fingerprint()
            self.targets[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != evologics_ping_status_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return evologics_ping_status_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = evologics_ping_status_t()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        __modem_name_len = struct.unpack('>I', buf.read(4))[0]
        self.modem_name = buf.read(__modem_name_len)[:-1].decode('utf-8', 'replace')
        self.modem_id, self.target_count = struct.unpack(">bb", buf.read(2))
        self.targets = []
        for i0 in range(self.target_count):
            self.targets.append(senlcm.evologics_ping_target_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if evologics_ping_status_t in parents: return 0
        newparents = parents + [evologics_ping_status_t]
        tmphash = (0xaf9557268aef1b8b+ senlcm.evologics_ping_target_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if evologics_ping_status_t._packed_fingerprint is None:
            evologics_ping_status_t._packed_fingerprint = struct.pack(">Q", evologics_ping_status_t._get_hash_recursive([]))
        return evologics_ping_status_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

