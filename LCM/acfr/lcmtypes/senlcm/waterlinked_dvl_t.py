"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import senlcm.waterlinked_beam_t

class waterlinked_dvl_t(object):
    __slots__ = ["utime", "velocity", "fom", "covariance", "altitude", "transducers", "velocity_valid", "status", "time_of_validity", "time_of_transmission"]

    def __init__(self):
        self.utime = 0
        self.velocity = [ 0.0 for dim0 in range(3) ]
        self.fom = 0.0
        self.covariance = [ 0.0 for dim0 in range(9) ]
        self.altitude = 0.0
        self.transducers = [ senlcm.waterlinked_beam_t() for dim0 in range(4) ]
        self.velocity_valid = False
        self.status = 0
        self.time_of_validity = 0
        self.time_of_transmission = 0

    def encode(self):
        buf = BytesIO()
        buf.write(waterlinked_dvl_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.utime))
        buf.write(struct.pack('>3d', *self.velocity[:3]))
        buf.write(struct.pack(">d", self.fom))
        buf.write(struct.pack('>9d', *self.covariance[:9]))
        buf.write(struct.pack(">d", self.altitude))
        for i0 in range(4):
            assert self.transducers[i0]._get_packed_fingerprint() == senlcm.waterlinked_beam_t._get_packed_fingerprint()
            self.transducers[i0]._encode_one(buf)
        buf.write(struct.pack(">bbqq", self.velocity_valid, self.status, self.time_of_validity, self.time_of_transmission))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != waterlinked_dvl_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return waterlinked_dvl_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = waterlinked_dvl_t()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        self.velocity = struct.unpack('>3d', buf.read(24))
        self.fom = struct.unpack(">d", buf.read(8))[0]
        self.covariance = struct.unpack('>9d', buf.read(72))
        self.altitude = struct.unpack(">d", buf.read(8))[0]
        self.transducers = []
        for i0 in range(4):
            self.transducers.append(senlcm.waterlinked_beam_t._decode_one(buf))
        self.velocity_valid = bool(struct.unpack('b', buf.read(1))[0])
        self.status, self.time_of_validity, self.time_of_transmission = struct.unpack(">bqq", buf.read(17))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if waterlinked_dvl_t in parents: return 0
        newparents = parents + [waterlinked_dvl_t]
        tmphash = (0xae344567bcfc491d+ senlcm.waterlinked_beam_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if waterlinked_dvl_t._packed_fingerprint is None:
            waterlinked_dvl_t._packed_fingerprint = struct.pack(">Q", waterlinked_dvl_t._get_hash_recursive([]))
        return waterlinked_dvl_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

