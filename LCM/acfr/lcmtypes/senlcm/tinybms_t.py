"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class tinybms_t(object):
    __slots__ = ["utime", "voltage", "current", "power", "charge_p", "detected_cells", "cell_voltage", "cell_min", "cell_max", "bms_temp", "status", "balance", "event"]

    def __init__(self):
        self.utime = 0
        self.voltage = 0.0
        self.current = 0.0
        self.power = 0.0
        self.charge_p = 0
        self.detected_cells = 0
        self.cell_voltage = []
        self.cell_min = 0.0
        self.cell_max = 0.0
        self.bms_temp = 0.0
        self.status = ""
        self.balance = []
        self.event = ""

    def encode(self):
        buf = BytesIO()
        buf.write(tinybms_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qfffbb", self.utime, self.voltage, self.current, self.power, self.charge_p, self.detected_cells))
        buf.write(struct.pack('>%df' % self.detected_cells, *self.cell_voltage[:self.detected_cells]))
        buf.write(struct.pack(">fff", self.cell_min, self.cell_max, self.bms_temp))
        __status_encoded = self.status.encode('utf-8')
        buf.write(struct.pack('>I', len(__status_encoded)+1))
        buf.write(__status_encoded)
        buf.write(b"\0")
        buf.write(struct.pack('>%db' % self.detected_cells, *self.balance[:self.detected_cells]))
        __event_encoded = self.event.encode('utf-8')
        buf.write(struct.pack('>I', len(__event_encoded)+1))
        buf.write(__event_encoded)
        buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != tinybms_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return tinybms_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = tinybms_t()
        self.utime, self.voltage, self.current, self.power, self.charge_p, self.detected_cells = struct.unpack(">qfffbb", buf.read(22))
        self.cell_voltage = struct.unpack('>%df' % self.detected_cells, buf.read(self.detected_cells * 4))
        self.cell_min, self.cell_max, self.bms_temp = struct.unpack(">fff", buf.read(12))
        __status_len = struct.unpack('>I', buf.read(4))[0]
        self.status = buf.read(__status_len)[:-1].decode('utf-8', 'replace')
        self.balance = struct.unpack('>%db' % self.detected_cells, buf.read(self.detected_cells))
        __event_len = struct.unpack('>I', buf.read(4))[0]
        self.event = buf.read(__event_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if tinybms_t in parents: return 0
        tmphash = (0xab8e045c9dc1b2c4) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if tinybms_t._packed_fingerprint is None:
            tinybms_t._packed_fingerprint = struct.pack(">Q", tinybms_t._get_hash_recursive([]))
        return tinybms_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

