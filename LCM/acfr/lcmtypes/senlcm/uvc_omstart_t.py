"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class uvc_omstart_t(object):
    __slots__ = ["msg_flag_gps", "msg_flag_sounder", "msg_flag_cal_pressure", "mission_type", "mission_name", "srp_name"]

    MSG_FLAG_IGNORE = 1
    MSG_FLAG_DO_NOT_IGNORE = 0
    MIS_TYPE_NORMAL = 0
    MIS_TYPE_SRP = 1

    def __init__(self):
        self.msg_flag_gps = 0
        self.msg_flag_sounder = 0
        self.msg_flag_cal_pressure = 0
        self.mission_type = 0
        self.mission_name = ""
        self.srp_name = ""

    def encode(self):
        buf = BytesIO()
        buf.write(uvc_omstart_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iiii", self.msg_flag_gps, self.msg_flag_sounder, self.msg_flag_cal_pressure, self.mission_type))
        __mission_name_encoded = self.mission_name.encode('utf-8')
        buf.write(struct.pack('>I', len(__mission_name_encoded)+1))
        buf.write(__mission_name_encoded)
        buf.write(b"\0")
        __srp_name_encoded = self.srp_name.encode('utf-8')
        buf.write(struct.pack('>I', len(__srp_name_encoded)+1))
        buf.write(__srp_name_encoded)
        buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != uvc_omstart_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return uvc_omstart_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = uvc_omstart_t()
        self.msg_flag_gps, self.msg_flag_sounder, self.msg_flag_cal_pressure, self.mission_type = struct.unpack(">iiii", buf.read(16))
        __mission_name_len = struct.unpack('>I', buf.read(4))[0]
        self.mission_name = buf.read(__mission_name_len)[:-1].decode('utf-8', 'replace')
        __srp_name_len = struct.unpack('>I', buf.read(4))[0]
        self.srp_name = buf.read(__srp_name_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if uvc_omstart_t in parents: return 0
        tmphash = (0x5e6e51d7bede4e06) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if uvc_omstart_t._packed_fingerprint is None:
            uvc_omstart_t._packed_fingerprint = struct.pack(">Q", uvc_omstart_t._get_hash_recursive([]))
        return uvc_omstart_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

