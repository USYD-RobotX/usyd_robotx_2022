"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class nmea_gphdt_t(object):
    __slots__ = ["utime", "h_true", "h_raw", "deviation", "variation"]

    def __init__(self):
        self.utime = 0
        self.h_true = 0.0
        self.h_raw = 0.0
        self.deviation = 0.0
        self.variation = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(nmea_gphdt_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qffff", self.utime, self.h_true, self.h_raw, self.deviation, self.variation))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != nmea_gphdt_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return nmea_gphdt_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = nmea_gphdt_t()
        self.utime, self.h_true, self.h_raw, self.deviation, self.variation = struct.unpack(">qffff", buf.read(24))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if nmea_gphdt_t in parents: return 0
        tmphash = (0xd45599a324d80cac) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if nmea_gphdt_t._packed_fingerprint is None:
            nmea_gphdt_t._packed_fingerprint = struct.pack(">Q", nmea_gphdt_t._get_hash_recursive([]))
        return nmea_gphdt_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

