"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class evologics_ping_target_t(object):
    __slots__ = ["utime", "target_name", "target_id", "send_pings", "send_fixes", "minimum_period", "last_sent_fix_time", "last_fix_time", "last_ping_time"]

    def __init__(self):
        self.utime = 0
        self.target_name = ""
        self.target_id = 0
        self.send_pings = False
        self.send_fixes = False
        self.minimum_period = 0
        self.last_sent_fix_time = 0
        self.last_fix_time = 0
        self.last_ping_time = 0

    def encode(self):
        buf = BytesIO()
        buf.write(evologics_ping_target_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.utime))
        __target_name_encoded = self.target_name.encode('utf-8')
        buf.write(struct.pack('>I', len(__target_name_encoded)+1))
        buf.write(__target_name_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">bbbqqqq", self.target_id, self.send_pings, self.send_fixes, self.minimum_period, self.last_sent_fix_time, self.last_fix_time, self.last_ping_time))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != evologics_ping_target_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return evologics_ping_target_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = evologics_ping_target_t()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        __target_name_len = struct.unpack('>I', buf.read(4))[0]
        self.target_name = buf.read(__target_name_len)[:-1].decode('utf-8', 'replace')
        self.target_id = struct.unpack(">b", buf.read(1))[0]
        self.send_pings = bool(struct.unpack('b', buf.read(1))[0])
        self.send_fixes = bool(struct.unpack('b', buf.read(1))[0])
        self.minimum_period, self.last_sent_fix_time, self.last_fix_time, self.last_ping_time = struct.unpack(">qqqq", buf.read(32))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if evologics_ping_target_t in parents: return 0
        tmphash = (0x58800f87196aa256) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if evologics_ping_target_t._packed_fingerprint is None:
            evologics_ping_target_t._packed_fingerprint = struct.pack(">Q", evologics_ping_target_t._get_hash_recursive([]))
        return evologics_ping_target_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

