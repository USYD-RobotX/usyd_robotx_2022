"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class smartbattery_t(object):
    __slots__ = ["temperature", "voltage", "current", "avg_current", "remaining_capacity", "full_capacity", "charge_state", "avg_tte", "avg_ttf", "serial_num", "cycles"]

    def __init__(self):
        self.temperature = 0.0
        self.voltage = 0.0
        self.current = 0.0
        self.avg_current = 0.0
        self.remaining_capacity = 0.0
        self.full_capacity = 0.0
        self.charge_state = 0
        self.avg_tte = 0
        self.avg_ttf = 0
        self.serial_num = 0
        self.cycles = 0

    def encode(self):
        buf = BytesIO()
        buf.write(smartbattery_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ddddddiiiii", self.temperature, self.voltage, self.current, self.avg_current, self.remaining_capacity, self.full_capacity, self.charge_state, self.avg_tte, self.avg_ttf, self.serial_num, self.cycles))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != smartbattery_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return smartbattery_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = smartbattery_t()
        self.temperature, self.voltage, self.current, self.avg_current, self.remaining_capacity, self.full_capacity, self.charge_state, self.avg_tte, self.avg_ttf, self.serial_num, self.cycles = struct.unpack(">ddddddiiiii", buf.read(68))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if smartbattery_t in parents: return 0
        tmphash = (0x1d8fc27ed90f9712) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if smartbattery_t._packed_fingerprint is None:
            smartbattery_t._packed_fingerprint = struct.pack(">Q", smartbattery_t._get_hash_recursive([]))
        return smartbattery_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

