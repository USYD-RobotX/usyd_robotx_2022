"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class mtig_t(object):
    __slots__ = ["ts_unix", "ts_packet", "ts_rtc", "status", "sample_counter", "eul_roll", "eul_pitch", "eul_yaw", "acc_x", "acc_y", "acc_z", "gyr_p", "gyr_q", "gyr_r", "mag_x", "mag_y", "mag_z", "pos_lat", "pos_lon", "pos_alt", "vel_n", "vel_e", "vel_d", "rawgps_pressure", "rawgps_pressureage", "rawgps_timeofweek", "rawgps_pos_lat", "rawgps_pos_lon", "rawgps_pos_alt", "rawgps_vel_n", "rawgps_vel_e", "rawgps_vel_d", "rawgps_accuracy_horiz", "rawgps_accuracy_vert", "rawgps_accuracy_speed", "rawgps_dataage", "publish_contains"]

    def __init__(self):
        self.ts_unix = 0
        self.ts_packet = 0
        self.ts_rtc = 0
        self.status = 0
        self.sample_counter = 0
        self.eul_roll = 0.0
        self.eul_pitch = 0.0
        self.eul_yaw = 0.0
        self.acc_x = 0.0
        self.acc_y = 0.0
        self.acc_z = 0.0
        self.gyr_p = 0.0
        self.gyr_q = 0.0
        self.gyr_r = 0.0
        self.mag_x = 0.0
        self.mag_y = 0.0
        self.mag_z = 0.0
        self.pos_lat = 0.0
        self.pos_lon = 0.0
        self.pos_alt = 0.0
        self.vel_n = 0.0
        self.vel_e = 0.0
        self.vel_d = 0.0
        self.rawgps_pressure = 0.0
        self.rawgps_pressureage = 0
        self.rawgps_timeofweek = 0
        self.rawgps_pos_lat = 0.0
        self.rawgps_pos_lon = 0.0
        self.rawgps_pos_alt = 0.0
        self.rawgps_vel_n = 0.0
        self.rawgps_vel_e = 0.0
        self.rawgps_vel_d = 0.0
        self.rawgps_accuracy_horiz = 0.0
        self.rawgps_accuracy_vert = 0.0
        self.rawgps_accuracy_speed = 0.0
        self.rawgps_dataage = 0
        self.publish_contains = 0

    def encode(self):
        buf = BytesIO()
        buf.write(mtig_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qqqhhdddddddddddddddddddhqdddddddddhb", self.ts_unix, self.ts_packet, self.ts_rtc, self.status, self.sample_counter, self.eul_roll, self.eul_pitch, self.eul_yaw, self.acc_x, self.acc_y, self.acc_z, self.gyr_p, self.gyr_q, self.gyr_r, self.mag_x, self.mag_y, self.mag_z, self.pos_lat, self.pos_lon, self.pos_alt, self.vel_n, self.vel_e, self.vel_d, self.rawgps_pressure, self.rawgps_pressureage, self.rawgps_timeofweek, self.rawgps_pos_lat, self.rawgps_pos_lon, self.rawgps_pos_alt, self.rawgps_vel_n, self.rawgps_vel_e, self.rawgps_vel_d, self.rawgps_accuracy_horiz, self.rawgps_accuracy_vert, self.rawgps_accuracy_speed, self.rawgps_dataage, self.publish_contains))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != mtig_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return mtig_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = mtig_t()
        self.ts_unix, self.ts_packet, self.ts_rtc, self.status, self.sample_counter, self.eul_roll, self.eul_pitch, self.eul_yaw, self.acc_x, self.acc_y, self.acc_z, self.gyr_p, self.gyr_q, self.gyr_r, self.mag_x, self.mag_y, self.mag_z, self.pos_lat, self.pos_lon, self.pos_alt, self.vel_n, self.vel_e, self.vel_d, self.rawgps_pressure, self.rawgps_pressureage, self.rawgps_timeofweek, self.rawgps_pos_lat, self.rawgps_pos_lon, self.rawgps_pos_alt, self.rawgps_vel_n, self.rawgps_vel_e, self.rawgps_vel_d, self.rawgps_accuracy_horiz, self.rawgps_accuracy_vert, self.rawgps_accuracy_speed, self.rawgps_dataage, self.publish_contains = struct.unpack(">qqqhhdddddddddddddddddddhqdddddddddhb", buf.read(265))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if mtig_t in parents: return 0
        tmphash = (0xc41046b70d271165) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if mtig_t._packed_fingerprint is None:
            mtig_t._packed_fingerprint = struct.pack(">Q", mtig_t._get_hash_recursive([]))
        return mtig_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

