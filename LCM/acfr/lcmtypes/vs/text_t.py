"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class text_t(object):
    __slots__ = ["id", "collection_id", "object_id", "text"]

    def __init__(self):
        self.id = 0
        self.collection_id = 0
        self.object_id = 0
        self.text = ""

    def encode(self):
        buf = BytesIO()
        buf.write(text_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qiq", self.id, self.collection_id, self.object_id))
        __text_encoded = self.text.encode('utf-8')
        buf.write(struct.pack('>I', len(__text_encoded)+1))
        buf.write(__text_encoded)
        buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != text_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return text_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = text_t()
        self.id, self.collection_id, self.object_id = struct.unpack(">qiq", buf.read(20))
        __text_len = struct.unpack('>I', buf.read(4))[0]
        self.text = buf.read(__text_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if text_t in parents: return 0
        tmphash = (0x6149fafb00df4bdc) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if text_t._packed_fingerprint is None:
            text_t._packed_fingerprint = struct.pack(">Q", text_t._get_hash_recursive([]))
        return text_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

