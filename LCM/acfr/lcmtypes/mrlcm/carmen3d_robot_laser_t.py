"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import bot_core.pose_t

import bot_core.planar_lidar_t

import mrlcm.carmen3d_point_cov_t

class carmen3d_robot_laser_t(object):
    __slots__ = ["utime", "laser", "pose", "cov"]

    def __init__(self):
        self.utime = 0
        self.laser = bot_core.planar_lidar_t()
        self.pose = bot_core.pose_t()
        self.cov = mrlcm.carmen3d_point_cov_t()

    def encode(self):
        buf = BytesIO()
        buf.write(carmen3d_robot_laser_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.utime))
        assert self.laser._get_packed_fingerprint() == bot_core.planar_lidar_t._get_packed_fingerprint()
        self.laser._encode_one(buf)
        assert self.pose._get_packed_fingerprint() == bot_core.pose_t._get_packed_fingerprint()
        self.pose._encode_one(buf)
        assert self.cov._get_packed_fingerprint() == mrlcm.carmen3d_point_cov_t._get_packed_fingerprint()
        self.cov._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != carmen3d_robot_laser_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return carmen3d_robot_laser_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = carmen3d_robot_laser_t()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        self.laser = bot_core.planar_lidar_t._decode_one(buf)
        self.pose = bot_core.pose_t._decode_one(buf)
        self.cov = mrlcm.carmen3d_point_cov_t._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if carmen3d_robot_laser_t in parents: return 0
        newparents = parents + [carmen3d_robot_laser_t]
        tmphash = (0xb23817dbffe7475b+ bot_core.planar_lidar_t._get_hash_recursive(newparents)+ bot_core.pose_t._get_hash_recursive(newparents)+ mrlcm.carmen3d_point_cov_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if carmen3d_robot_laser_t._packed_fingerprint is None:
            carmen3d_robot_laser_t._packed_fingerprint = struct.pack(">Q", carmen3d_robot_laser_t._get_hash_recursive([]))
        return carmen3d_robot_laser_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

