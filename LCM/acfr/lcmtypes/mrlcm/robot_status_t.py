"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class robot_status_t(object):
    __slots__ = ["utime", "state", "faults"]

    UNDEFINED = 0
    OVERRIDE = 1
    STOPPED = 2
    STANDBY = 3
    ACTIVE = 4
    ERROR = 5

    def __init__(self):
        self.utime = 0
        self.state = 0
        self.faults = 0

    def encode(self):
        buf = BytesIO()
        buf.write(robot_status_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qiq", self.utime, self.state, self.faults))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != robot_status_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return robot_status_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = robot_status_t()
        self.utime, self.state, self.faults = struct.unpack(">qiq", buf.read(20))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if robot_status_t in parents: return 0
        tmphash = (0x737050846e567c5d) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if robot_status_t._packed_fingerprint is None:
            robot_status_t._packed_fingerprint = struct.pack(">Q", robot_status_t._get_hash_recursive([]))
        return robot_status_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

