"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class imu_t(object):
    __slots__ = ["utime", "linear_accel", "rotation_rate", "q", "has_heading", "heading", "imu_serial_number"]

    def __init__(self):
        self.utime = 0
        self.linear_accel = [ 0.0 for dim0 in range(3) ]
        self.rotation_rate = [ 0.0 for dim0 in range(3) ]
        self.q = [ 0.0 for dim0 in range(4) ]
        self.has_heading = False
        self.heading = 0.0
        self.imu_serial_number = 0

    def encode(self):
        buf = BytesIO()
        buf.write(imu_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.utime))
        buf.write(struct.pack('>3d', *self.linear_accel[:3]))
        buf.write(struct.pack('>3d', *self.rotation_rate[:3]))
        buf.write(struct.pack('>4d', *self.q[:4]))
        buf.write(struct.pack(">bdi", self.has_heading, self.heading, self.imu_serial_number))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != imu_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return imu_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = imu_t()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        self.linear_accel = struct.unpack('>3d', buf.read(24))
        self.rotation_rate = struct.unpack('>3d', buf.read(24))
        self.q = struct.unpack('>4d', buf.read(32))
        self.has_heading = bool(struct.unpack('b', buf.read(1))[0])
        self.heading, self.imu_serial_number = struct.unpack(">di", buf.read(12))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if imu_t in parents: return 0
        tmphash = (0x335acf906b5e190a) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if imu_t._packed_fingerprint is None:
            imu_t._packed_fingerprint = struct.pack(">Q", imu_t._get_hash_recursive([]))
        return imu_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

