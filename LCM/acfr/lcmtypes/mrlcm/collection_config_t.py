"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import mrlcm.property_t

class collection_config_t(object):
    __slots__ = ["collection_id", "n", "properties"]

    def __init__(self):
        self.collection_id = 0
        self.n = 0
        self.properties = []

    def encode(self):
        buf = BytesIO()
        buf.write(collection_config_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ii", self.collection_id, self.n))
        for i0 in range(self.n):
            assert self.properties[i0]._get_packed_fingerprint() == mrlcm.property_t._get_packed_fingerprint()
            self.properties[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != collection_config_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return collection_config_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = collection_config_t()
        self.collection_id, self.n = struct.unpack(">ii", buf.read(8))
        self.properties = []
        for i0 in range(self.n):
            self.properties.append(mrlcm.property_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if collection_config_t in parents: return 0
        newparents = parents + [collection_config_t]
        tmphash = (0x98c0e311d21721a8+ mrlcm.property_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if collection_config_t._packed_fingerprint is None:
            collection_config_t._packed_fingerprint = struct.pack(">Q", collection_config_t._get_hash_recursive([]))
        return collection_config_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

