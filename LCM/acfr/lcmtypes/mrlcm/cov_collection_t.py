"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import mrlcm.cov_t

class cov_collection_t(object):
    __slots__ = ["id", "name", "type", "reset", "ncovs", "covs"]

    ELLIPSOID = 1

    def __init__(self):
        self.id = 0
        self.name = ""
        self.type = 0
        self.reset = False
        self.ncovs = 0
        self.covs = []

    def encode(self):
        buf = BytesIO()
        buf.write(cov_collection_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.id))
        __name_encoded = self.name.encode('utf-8')
        buf.write(struct.pack('>I', len(__name_encoded)+1))
        buf.write(__name_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">hbi", self.type, self.reset, self.ncovs))
        for i0 in range(self.ncovs):
            assert self.covs[i0]._get_packed_fingerprint() == mrlcm.cov_t._get_packed_fingerprint()
            self.covs[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != cov_collection_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return cov_collection_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = cov_collection_t()
        self.id = struct.unpack(">i", buf.read(4))[0]
        __name_len = struct.unpack('>I', buf.read(4))[0]
        self.name = buf.read(__name_len)[:-1].decode('utf-8', 'replace')
        self.type = struct.unpack(">h", buf.read(2))[0]
        self.reset = bool(struct.unpack('b', buf.read(1))[0])
        self.ncovs = struct.unpack(">i", buf.read(4))[0]
        self.covs = []
        for i0 in range(self.ncovs):
            self.covs.append(mrlcm.cov_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if cov_collection_t in parents: return 0
        newparents = parents + [cov_collection_t]
        tmphash = (0xf7f172f9b65deb3+ mrlcm.cov_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if cov_collection_t._packed_fingerprint is None:
            cov_collection_t._packed_fingerprint = struct.pack(">Q", cov_collection_t._get_hash_recursive([]))
        return cov_collection_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

