"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class pvn_conditions_t(object):
    __slots__ = ["sky", "tod", "snow", "rain", "foliage"]

    SKY_UNKNOWN = 0
    SKY_CLEAR = 1
    SKY_PARTLY_CLOUDY = 2
    SKY_MOSTLY_CLOUDY = 3
    SKY_OVERCAST = 4
    SKY_FOG = 5
    TOD_UNKNOWN = 0
    TOD_DAWN = 1
    TOD_MORNING = 2
    TOD_MIDDAY = 3
    TOD_AFTERNOON = 4
    TOD_DUSK = 5
    TOD_NIGHT = 6

    def __init__(self):
        self.sky = 0
        self.tod = 0
        self.snow = 0
        self.rain = 0
        self.foliage = 0

    def encode(self):
        buf = BytesIO()
        buf.write(pvn_conditions_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iiiii", self.sky, self.tod, self.snow, self.rain, self.foliage))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != pvn_conditions_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return pvn_conditions_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = pvn_conditions_t()
        self.sky, self.tod, self.snow, self.rain, self.foliage = struct.unpack(">iiiii", buf.read(20))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if pvn_conditions_t in parents: return 0
        tmphash = (0x603824a4229aa315) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if pvn_conditions_t._packed_fingerprint is None:
            pvn_conditions_t._packed_fingerprint = struct.pack(">Q", pvn_conditions_t._get_hash_recursive([]))
        return pvn_conditions_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

