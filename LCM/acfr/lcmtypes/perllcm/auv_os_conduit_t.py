"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import perllcm.auv_os_conduit_raw_t

class auv_os_conduit_t(object):
    __slots__ = ["utime", "ojw", "omload", "omp", "omstart", "omstop", "opos", "osd"]

    def __init__(self):
        self.utime = 0
        self.ojw = perllcm.auv_os_conduit_raw_t()
        self.omload = perllcm.auv_os_conduit_raw_t()
        self.omp = perllcm.auv_os_conduit_raw_t()
        self.omstart = perllcm.auv_os_conduit_raw_t()
        self.omstop = perllcm.auv_os_conduit_raw_t()
        self.opos = perllcm.auv_os_conduit_raw_t()
        self.osd = perllcm.auv_os_conduit_raw_t()

    def encode(self):
        buf = BytesIO()
        buf.write(auv_os_conduit_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.utime))
        assert self.ojw._get_packed_fingerprint() == perllcm.auv_os_conduit_raw_t._get_packed_fingerprint()
        self.ojw._encode_one(buf)
        assert self.omload._get_packed_fingerprint() == perllcm.auv_os_conduit_raw_t._get_packed_fingerprint()
        self.omload._encode_one(buf)
        assert self.omp._get_packed_fingerprint() == perllcm.auv_os_conduit_raw_t._get_packed_fingerprint()
        self.omp._encode_one(buf)
        assert self.omstart._get_packed_fingerprint() == perllcm.auv_os_conduit_raw_t._get_packed_fingerprint()
        self.omstart._encode_one(buf)
        assert self.omstop._get_packed_fingerprint() == perllcm.auv_os_conduit_raw_t._get_packed_fingerprint()
        self.omstop._encode_one(buf)
        assert self.opos._get_packed_fingerprint() == perllcm.auv_os_conduit_raw_t._get_packed_fingerprint()
        self.opos._encode_one(buf)
        assert self.osd._get_packed_fingerprint() == perllcm.auv_os_conduit_raw_t._get_packed_fingerprint()
        self.osd._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != auv_os_conduit_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return auv_os_conduit_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = auv_os_conduit_t()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        self.ojw = perllcm.auv_os_conduit_raw_t._decode_one(buf)
        self.omload = perllcm.auv_os_conduit_raw_t._decode_one(buf)
        self.omp = perllcm.auv_os_conduit_raw_t._decode_one(buf)
        self.omstart = perllcm.auv_os_conduit_raw_t._decode_one(buf)
        self.omstop = perllcm.auv_os_conduit_raw_t._decode_one(buf)
        self.opos = perllcm.auv_os_conduit_raw_t._decode_one(buf)
        self.osd = perllcm.auv_os_conduit_raw_t._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if auv_os_conduit_t in parents: return 0
        newparents = parents + [auv_os_conduit_t]
        tmphash = (0x3783cb5017bc777d+ perllcm.auv_os_conduit_raw_t._get_hash_recursive(newparents)+ perllcm.auv_os_conduit_raw_t._get_hash_recursive(newparents)+ perllcm.auv_os_conduit_raw_t._get_hash_recursive(newparents)+ perllcm.auv_os_conduit_raw_t._get_hash_recursive(newparents)+ perllcm.auv_os_conduit_raw_t._get_hash_recursive(newparents)+ perllcm.auv_os_conduit_raw_t._get_hash_recursive(newparents)+ perllcm.auv_os_conduit_raw_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if auv_os_conduit_t._packed_fingerprint is None:
            auv_os_conduit_t._packed_fingerprint = struct.pack(">Q", auv_os_conduit_t._get_hash_recursive([]))
        return auv_os_conduit_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

