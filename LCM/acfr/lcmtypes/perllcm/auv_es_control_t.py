"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class auv_es_control_t(object):
    __slots__ = ["utime", "alt_mod", "alt_mod_flag", "prev_wp_count", "prev_wp", "danger_flag", "danger_lat", "danger_long", "danger_depth", "abort_count", "abort", "dx_up", "dx_down", "timeout"]

    def __init__(self):
        self.utime = 0
        self.alt_mod = 0.0
        self.alt_mod_flag = 0.0
        self.prev_wp_count = 0
        self.prev_wp = False
        self.danger_flag = False
        self.danger_lat = 0.0
        self.danger_long = 0.0
        self.danger_depth = 0.0
        self.abort_count = 0
        self.abort = False
        self.dx_up = 0
        self.dx_down = 0
        self.timeout = False

    def encode(self):
        buf = BytesIO()
        buf.write(auv_es_control_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qddibbdddibiib", self.utime, self.alt_mod, self.alt_mod_flag, self.prev_wp_count, self.prev_wp, self.danger_flag, self.danger_lat, self.danger_long, self.danger_depth, self.abort_count, self.abort, self.dx_up, self.dx_down, self.timeout))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != auv_es_control_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return auv_es_control_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = auv_es_control_t()
        self.utime, self.alt_mod, self.alt_mod_flag, self.prev_wp_count = struct.unpack(">qddi", buf.read(28))
        self.prev_wp = bool(struct.unpack('b', buf.read(1))[0])
        self.danger_flag = bool(struct.unpack('b', buf.read(1))[0])
        self.danger_lat, self.danger_long, self.danger_depth, self.abort_count = struct.unpack(">dddi", buf.read(28))
        self.abort = bool(struct.unpack('b', buf.read(1))[0])
        self.dx_up, self.dx_down = struct.unpack(">ii", buf.read(8))
        self.timeout = bool(struct.unpack('b', buf.read(1))[0])
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if auv_es_control_t in parents: return 0
        tmphash = (0x5ca5da7dd11430) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if auv_es_control_t._packed_fingerprint is None:
            auv_es_control_t._packed_fingerprint = struct.pack(">Q", auv_es_control_t._get_hash_recursive([]))
        return auv_es_control_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

