"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class viewer_image_polygon_t(object):
    __slots__ = ["utime", "num_vertices", "u", "v", "draw_border", "border_color", "draw_fill", "fill_color"]

    def __init__(self):
        self.utime = 0
        self.num_vertices = 0
        self.u = []
        self.v = []
        self.draw_border = False
        self.border_color = [ 0.0 for dim0 in range(4) ]
        self.draw_fill = False
        self.fill_color = [ 0.0 for dim0 in range(4) ]

    def encode(self):
        buf = BytesIO()
        buf.write(viewer_image_polygon_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.utime, self.num_vertices))
        buf.write(struct.pack('>%df' % self.num_vertices, *self.u[:self.num_vertices]))
        buf.write(struct.pack('>%df' % self.num_vertices, *self.v[:self.num_vertices]))
        buf.write(struct.pack(">b", self.draw_border))
        buf.write(struct.pack('>4f', *self.border_color[:4]))
        buf.write(struct.pack(">b", self.draw_fill))
        buf.write(struct.pack('>4f', *self.fill_color[:4]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != viewer_image_polygon_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return viewer_image_polygon_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = viewer_image_polygon_t()
        self.utime, self.num_vertices = struct.unpack(">qi", buf.read(12))
        self.u = struct.unpack('>%df' % self.num_vertices, buf.read(self.num_vertices * 4))
        self.v = struct.unpack('>%df' % self.num_vertices, buf.read(self.num_vertices * 4))
        self.draw_border = bool(struct.unpack('b', buf.read(1))[0])
        self.border_color = struct.unpack('>4f', buf.read(16))
        self.draw_fill = bool(struct.unpack('b', buf.read(1))[0])
        self.fill_color = struct.unpack('>4f', buf.read(16))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if viewer_image_polygon_t in parents: return 0
        tmphash = (0x74754be36d1f1544) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if viewer_image_polygon_t._packed_fingerprint is None:
            viewer_image_polygon_t._packed_fingerprint = struct.pack(">Q", viewer_image_polygon_t._get_hash_recursive([]))
        return viewer_image_polygon_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

