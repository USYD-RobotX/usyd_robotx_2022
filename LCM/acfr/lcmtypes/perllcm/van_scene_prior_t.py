"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class van_scene_prior_t(object):
    __slots__ = ["utime", "locally_planar", "lp_absdev", "lp_coeff", "Zmean", "Zstd", "Zabsdev", "Zmin", "Z10", "Z20", "Z30", "Z40", "Z50", "Z60", "Z70", "Z80", "Z90", "Zmax", "npts", "id", "X", "Y", "Z", "u", "v"]

    def __init__(self):
        self.utime = 0
        self.locally_planar = False
        self.lp_absdev = 0.0
        self.lp_coeff = [ 0.0 for dim0 in range(4) ]
        self.Zmean = 0.0
        self.Zstd = 0.0
        self.Zabsdev = 0.0
        self.Zmin = 0.0
        self.Z10 = 0.0
        self.Z20 = 0.0
        self.Z30 = 0.0
        self.Z40 = 0.0
        self.Z50 = 0.0
        self.Z60 = 0.0
        self.Z70 = 0.0
        self.Z80 = 0.0
        self.Z90 = 0.0
        self.Zmax = 0.0
        self.npts = 0
        self.id = []
        self.X = []
        self.Y = []
        self.Z = []
        self.u = []
        self.v = []

    def encode(self):
        buf = BytesIO()
        buf.write(van_scene_prior_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qbf", self.utime, self.locally_planar, self.lp_absdev))
        buf.write(struct.pack('>4d', *self.lp_coeff[:4]))
        buf.write(struct.pack(">ffffffffffffffi", self.Zmean, self.Zstd, self.Zabsdev, self.Zmin, self.Z10, self.Z20, self.Z30, self.Z40, self.Z50, self.Z60, self.Z70, self.Z80, self.Z90, self.Zmax, self.npts))
        buf.write(struct.pack('>%dh' % self.npts, *self.id[:self.npts]))
        buf.write(struct.pack('>%df' % self.npts, *self.X[:self.npts]))
        buf.write(struct.pack('>%df' % self.npts, *self.Y[:self.npts]))
        buf.write(struct.pack('>%df' % self.npts, *self.Z[:self.npts]))
        buf.write(struct.pack('>%df' % self.npts, *self.u[:self.npts]))
        buf.write(struct.pack('>%df' % self.npts, *self.v[:self.npts]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != van_scene_prior_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return van_scene_prior_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = van_scene_prior_t()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        self.locally_planar = bool(struct.unpack('b', buf.read(1))[0])
        self.lp_absdev = struct.unpack(">f", buf.read(4))[0]
        self.lp_coeff = struct.unpack('>4d', buf.read(32))
        self.Zmean, self.Zstd, self.Zabsdev, self.Zmin, self.Z10, self.Z20, self.Z30, self.Z40, self.Z50, self.Z60, self.Z70, self.Z80, self.Z90, self.Zmax, self.npts = struct.unpack(">ffffffffffffffi", buf.read(60))
        self.id = struct.unpack('>%dh' % self.npts, buf.read(self.npts * 2))
        self.X = struct.unpack('>%df' % self.npts, buf.read(self.npts * 4))
        self.Y = struct.unpack('>%df' % self.npts, buf.read(self.npts * 4))
        self.Z = struct.unpack('>%df' % self.npts, buf.read(self.npts * 4))
        self.u = struct.unpack('>%df' % self.npts, buf.read(self.npts * 4))
        self.v = struct.unpack('>%df' % self.npts, buf.read(self.npts * 4))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if van_scene_prior_t in parents: return 0
        tmphash = (0x42d31f09a8530c0d) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if van_scene_prior_t._packed_fingerprint is None:
            van_scene_prior_t._packed_fingerprint = struct.pack(">Q", van_scene_prior_t._get_hash_recursive([]))
        return van_scene_prior_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

