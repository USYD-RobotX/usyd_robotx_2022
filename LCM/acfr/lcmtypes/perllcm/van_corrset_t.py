"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class van_corrset_t(object):
    __slots__ = ["utime_i", "utime_j", "z", "R", "npts", "u1", "v1", "u2", "v2"]

    def __init__(self):
        self.utime_i = 0
        self.utime_j = 0
        self.z = [ 0.0 for dim0 in range(5) ]
        self.R = [ 0.0 for dim0 in range(25) ]
        self.npts = 0
        self.u1 = []
        self.v1 = []
        self.u2 = []
        self.v2 = []

    def encode(self):
        buf = BytesIO()
        buf.write(van_corrset_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qq", self.utime_i, self.utime_j))
        buf.write(struct.pack('>5d', *self.z[:5]))
        buf.write(struct.pack('>25d', *self.R[:25]))
        buf.write(struct.pack(">i", self.npts))
        buf.write(struct.pack('>%df' % self.npts, *self.u1[:self.npts]))
        buf.write(struct.pack('>%df' % self.npts, *self.v1[:self.npts]))
        buf.write(struct.pack('>%df' % self.npts, *self.u2[:self.npts]))
        buf.write(struct.pack('>%df' % self.npts, *self.v2[:self.npts]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != van_corrset_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return van_corrset_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = van_corrset_t()
        self.utime_i, self.utime_j = struct.unpack(">qq", buf.read(16))
        self.z = struct.unpack('>5d', buf.read(40))
        self.R = struct.unpack('>25d', buf.read(200))
        self.npts = struct.unpack(">i", buf.read(4))[0]
        self.u1 = struct.unpack('>%df' % self.npts, buf.read(self.npts * 4))
        self.v1 = struct.unpack('>%df' % self.npts, buf.read(self.npts * 4))
        self.u2 = struct.unpack('>%df' % self.npts, buf.read(self.npts * 4))
        self.v2 = struct.unpack('>%df' % self.npts, buf.read(self.npts * 4))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if van_corrset_t in parents: return 0
        tmphash = (0xf9eb61f4db52defe) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if van_corrset_t._packed_fingerprint is None:
            van_corrset_t._packed_fingerprint = struct.pack(">Q", van_corrset_t._get_hash_recursive([]))
        return van_corrset_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

