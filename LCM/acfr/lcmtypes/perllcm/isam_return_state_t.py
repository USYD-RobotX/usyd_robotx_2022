"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class isam_return_state_t(object):
    __slots__ = ["requester", "utime", "n", "timestamps", "k", "mu", "m", "covariance", "state_type"]

    def __init__(self):
        self.requester = 0
        self.utime = 0
        self.n = 0
        self.timestamps = []
        self.k = 0
        self.mu = []
        self.m = 0
        self.covariance = []
        self.state_type = 0

    def encode(self):
        buf = BytesIO()
        buf.write(isam_return_state_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iqi", self.requester, self.utime, self.n))
        buf.write(struct.pack('>%dq' % self.n, *self.timestamps[:self.n]))
        buf.write(struct.pack(">i", self.k))
        for i0 in range(self.k):
            buf.write(struct.pack('>6d', *self.mu[i0][:6]))
        buf.write(struct.pack(">i", self.m))
        buf.write(struct.pack('>%dd' % self.m, *self.covariance[:self.m]))
        buf.write(struct.pack(">h", self.state_type))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != isam_return_state_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return isam_return_state_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = isam_return_state_t()
        self.requester, self.utime, self.n = struct.unpack(">iqi", buf.read(16))
        self.timestamps = struct.unpack('>%dq' % self.n, buf.read(self.n * 8))
        self.k = struct.unpack(">i", buf.read(4))[0]
        self.mu = []
        for i0 in range(self.k):
            self.mu.append(struct.unpack('>6d', buf.read(48)))
        self.m = struct.unpack(">i", buf.read(4))[0]
        self.covariance = struct.unpack('>%dd' % self.m, buf.read(self.m * 8))
        self.state_type = struct.unpack(">h", buf.read(2))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if isam_return_state_t in parents: return 0
        tmphash = (0xd374af2e6ce85c48) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if isam_return_state_t._packed_fingerprint is None:
            isam_return_state_t._packed_fingerprint = struct.pack(">Q", isam_return_state_t._get_hash_recursive([]))
        return isam_return_state_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

