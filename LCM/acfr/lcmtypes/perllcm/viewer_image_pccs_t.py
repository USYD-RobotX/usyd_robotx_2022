"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class viewer_image_pccs_t(object):
    __slots__ = ["utime", "num_corrs", "u", "v", "up", "vp", "num_covp", "covp", "type"]

    TYPE_PUTATIVE = 0
    TYPE_INLIER = 1

    def __init__(self):
        self.utime = 0
        self.num_corrs = 0
        self.u = []
        self.v = []
        self.up = []
        self.vp = []
        self.num_covp = 0
        self.covp = []
        self.type = 0

    def encode(self):
        buf = BytesIO()
        buf.write(viewer_image_pccs_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.utime, self.num_corrs))
        buf.write(struct.pack('>%df' % self.num_corrs, *self.u[:self.num_corrs]))
        buf.write(struct.pack('>%df' % self.num_corrs, *self.v[:self.num_corrs]))
        buf.write(struct.pack('>%df' % self.num_corrs, *self.up[:self.num_corrs]))
        buf.write(struct.pack('>%df' % self.num_corrs, *self.vp[:self.num_corrs]))
        buf.write(struct.pack(">i", self.num_covp))
        for i0 in range(self.num_covp):
            buf.write(struct.pack('>4f', *self.covp[i0][:4]))
        buf.write(struct.pack(">i", self.type))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != viewer_image_pccs_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return viewer_image_pccs_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = viewer_image_pccs_t()
        self.utime, self.num_corrs = struct.unpack(">qi", buf.read(12))
        self.u = struct.unpack('>%df' % self.num_corrs, buf.read(self.num_corrs * 4))
        self.v = struct.unpack('>%df' % self.num_corrs, buf.read(self.num_corrs * 4))
        self.up = struct.unpack('>%df' % self.num_corrs, buf.read(self.num_corrs * 4))
        self.vp = struct.unpack('>%df' % self.num_corrs, buf.read(self.num_corrs * 4))
        self.num_covp = struct.unpack(">i", buf.read(4))[0]
        self.covp = []
        for i0 in range(self.num_covp):
            self.covp.append(struct.unpack('>4f', buf.read(16)))
        self.type = struct.unpack(">i", buf.read(4))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if viewer_image_pccs_t in parents: return 0
        tmphash = (0x37a47ab1f7b16765) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if viewer_image_pccs_t._packed_fingerprint is None:
            viewer_image_pccs_t._packed_fingerprint = struct.pack(">Q", viewer_image_pccs_t._get_hash_recursive([]))
        return viewer_image_pccs_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

