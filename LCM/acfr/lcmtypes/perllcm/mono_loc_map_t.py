"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import perllcm.mono_loc_feat_cluster_t

class mono_loc_map_t(object):
    __slots__ = ["utime", "num_clusters", "clusters", "orglat", "orglon", "orgalt"]

    def __init__(self):
        self.utime = 0
        self.num_clusters = 0
        self.clusters = []
        self.orglat = 0.0
        self.orglon = 0.0
        self.orgalt = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(mono_loc_map_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qq", self.utime, self.num_clusters))
        for i0 in range(self.num_clusters):
            assert self.clusters[i0]._get_packed_fingerprint() == perllcm.mono_loc_feat_cluster_t._get_packed_fingerprint()
            self.clusters[i0]._encode_one(buf)
        buf.write(struct.pack(">ddd", self.orglat, self.orglon, self.orgalt))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != mono_loc_map_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return mono_loc_map_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = mono_loc_map_t()
        self.utime, self.num_clusters = struct.unpack(">qq", buf.read(16))
        self.clusters = []
        for i0 in range(self.num_clusters):
            self.clusters.append(perllcm.mono_loc_feat_cluster_t._decode_one(buf))
        self.orglat, self.orglon, self.orgalt = struct.unpack(">ddd", buf.read(24))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if mono_loc_map_t in parents: return 0
        newparents = parents + [mono_loc_map_t]
        tmphash = (0x8a73225f0e2fdb4d+ perllcm.mono_loc_feat_cluster_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if mono_loc_map_t._packed_fingerprint is None:
            mono_loc_map_t._packed_fingerprint = struct.pack(">Q", mono_loc_map_t._get_hash_recursive([]))
        return mono_loc_map_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

