"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class isam_vlink_t(object):
    __slots__ = ["utime", "id1", "id2", "link_id", "creator_of_id2", "sensor_id", "dynamic_xvs", "x_vs1", "x_vs2", "n", "z", "n2", "R", "link_type", "accept", "accept_code"]

    SENSOR_ODOMETRY = 1
    SENSOR_CAMERA = 2
    SENSOR_LASER = 3
    SENSOR_SONAR = 4
    SENSOR_GLC = 5
    SENSOR_PLANE = 6
    LINK_PRIOR = 1
    LINK_POSE2D = 2
    LINK_POSE3D = 3
    LINK_POSE2DB = 4
    LINK_POSE3DB = 5
    LINK_ZPR_PARTIAL = 6
    LINK_XYZ_PARTIAL = 7
    LINK_H_PARTIAL = 8
    LINK_RP_PARTIAL = 9
    LINK_Z_PARTIAL = 10
    LINK_XY_PARTIAL = 11
    LINK_SONAR2D = 12
    LINK_PLANE3D = 13
    LINK_PLANE3D_PRIOR = 14
    CODE_ACCEPTED = 1
    CODE_INVALID_MODEL = 2
    CODE_LOW_THRESHOLD = 3
    CODE_MIN_CORR = 4
    CODE_MIN_INLIERS = 5
    CODE_SBA = 6
    CODE_MDIST_NAV = 7

    def __init__(self):
        self.utime = 0
        self.id1 = 0
        self.id2 = 0
        self.link_id = 0
        self.creator_of_id2 = 0
        self.sensor_id = 0
        self.dynamic_xvs = False
        self.x_vs1 = [ 0.0 for dim0 in range(6) ]
        self.x_vs2 = [ 0.0 for dim0 in range(6) ]
        self.n = 0
        self.z = []
        self.n2 = 0
        self.R = []
        self.link_type = 0
        self.accept = False
        self.accept_code = 0

    def encode(self):
        buf = BytesIO()
        buf.write(isam_vlink_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qqqiiib", self.utime, self.id1, self.id2, self.link_id, self.creator_of_id2, self.sensor_id, self.dynamic_xvs))
        buf.write(struct.pack('>6d', *self.x_vs1[:6]))
        buf.write(struct.pack('>6d', *self.x_vs2[:6]))
        buf.write(struct.pack(">i", self.n))
        buf.write(struct.pack('>%dd' % self.n, *self.z[:self.n]))
        buf.write(struct.pack(">i", self.n2))
        buf.write(struct.pack('>%dd' % self.n2, *self.R[:self.n2]))
        buf.write(struct.pack(">hbi", self.link_type, self.accept, self.accept_code))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != isam_vlink_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return isam_vlink_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = isam_vlink_t()
        self.utime, self.id1, self.id2, self.link_id, self.creator_of_id2, self.sensor_id = struct.unpack(">qqqiii", buf.read(36))
        self.dynamic_xvs = bool(struct.unpack('b', buf.read(1))[0])
        self.x_vs1 = struct.unpack('>6d', buf.read(48))
        self.x_vs2 = struct.unpack('>6d', buf.read(48))
        self.n = struct.unpack(">i", buf.read(4))[0]
        self.z = struct.unpack('>%dd' % self.n, buf.read(self.n * 8))
        self.n2 = struct.unpack(">i", buf.read(4))[0]
        self.R = struct.unpack('>%dd' % self.n2, buf.read(self.n2 * 8))
        self.link_type = struct.unpack(">h", buf.read(2))[0]
        self.accept = bool(struct.unpack('b', buf.read(1))[0])
        self.accept_code = struct.unpack(">i", buf.read(4))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if isam_vlink_t in parents: return 0
        tmphash = (0x14d5a51ab0c6949b) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if isam_vlink_t._packed_fingerprint is None:
            isam_vlink_t._packed_fingerprint = struct.pack(">Q", isam_vlink_t._get_hash_recursive([]))
        return isam_vlink_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

