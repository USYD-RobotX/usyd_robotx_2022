"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class ferns_tracker_t(object):
    __slots__ = ["utime", "found", "pose", "number_of_inliers", "number_of_corr", "rms_error", "H"]

    def __init__(self):
        self.utime = 0
        self.found = False
        self.pose = [ 0.0 for dim0 in range(6) ]
        self.number_of_inliers = 0
        self.number_of_corr = 0
        self.rms_error = 0.0
        self.H = [ 0.0 for dim0 in range(9) ]

    def encode(self):
        buf = BytesIO()
        buf.write(ferns_tracker_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qb", self.utime, self.found))
        buf.write(struct.pack('>6d', *self.pose[:6]))
        buf.write(struct.pack(">iid", self.number_of_inliers, self.number_of_corr, self.rms_error))
        buf.write(struct.pack('>9d', *self.H[:9]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ferns_tracker_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ferns_tracker_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ferns_tracker_t()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        self.found = bool(struct.unpack('b', buf.read(1))[0])
        self.pose = struct.unpack('>6d', buf.read(48))
        self.number_of_inliers, self.number_of_corr, self.rms_error = struct.unpack(">iid", buf.read(16))
        self.H = struct.unpack('>9d', buf.read(72))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ferns_tracker_t in parents: return 0
        tmphash = (0xfe355db5023fee12) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ferns_tracker_t._packed_fingerprint is None:
            ferns_tracker_t._packed_fingerprint = struct.pack(">Q", ferns_tracker_t._get_hash_recursive([]))
        return ferns_tracker_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

