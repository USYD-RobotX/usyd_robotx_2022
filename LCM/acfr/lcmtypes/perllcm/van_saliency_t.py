"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class van_saliency_t(object):
    __slots__ = ["utime", "feattype", "npts", "S_L", "bowE", "vocab_len", "is_S_L", "S_G", "S_G_max", "is_S_G"]

    def __init__(self):
        self.utime = 0
        self.feattype = 0
        self.npts = 0
        self.S_L = 0.0
        self.bowE = 0.0
        self.vocab_len = 0
        self.is_S_L = False
        self.S_G = 0.0
        self.S_G_max = 0.0
        self.is_S_G = False

    def encode(self):
        buf = BytesIO()
        buf.write(van_saliency_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qiiddibddb", self.utime, self.feattype, self.npts, self.S_L, self.bowE, self.vocab_len, self.is_S_L, self.S_G, self.S_G_max, self.is_S_G))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != van_saliency_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return van_saliency_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = van_saliency_t()
        self.utime, self.feattype, self.npts, self.S_L, self.bowE, self.vocab_len = struct.unpack(">qiiddi", buf.read(36))
        self.is_S_L = bool(struct.unpack('b', buf.read(1))[0])
        self.S_G, self.S_G_max = struct.unpack(">dd", buf.read(16))
        self.is_S_G = bool(struct.unpack('b', buf.read(1))[0])
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if van_saliency_t in parents: return 0
        tmphash = (0x9de7735fdc01525e) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if van_saliency_t._packed_fingerprint is None:
            van_saliency_t._packed_fingerprint = struct.pack(">Q", van_saliency_t._get_hash_recursive([]))
        return van_saliency_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

