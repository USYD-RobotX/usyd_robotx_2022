"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class pvn_eview_map_match_data_t(object):
    __slots__ = ["n", "exemplar_utimes", "obs_utimes", "obs_num_feats", "exemplar_num_feats", "num_inliers", "reproj_error", "match_success"]

    def __init__(self):
        self.n = 0
        self.exemplar_utimes = []
        self.obs_utimes = []
        self.obs_num_feats = []
        self.exemplar_num_feats = []
        self.num_inliers = []
        self.reproj_error = []
        self.match_success = []

    def encode(self):
        buf = BytesIO()
        buf.write(pvn_eview_map_match_data_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.n))
        buf.write(struct.pack('>%dq' % self.n, *self.exemplar_utimes[:self.n]))
        buf.write(struct.pack('>%dq' % self.n, *self.obs_utimes[:self.n]))
        buf.write(struct.pack('>%di' % self.n, *self.obs_num_feats[:self.n]))
        buf.write(struct.pack('>%di' % self.n, *self.exemplar_num_feats[:self.n]))
        buf.write(struct.pack('>%di' % self.n, *self.num_inliers[:self.n]))
        buf.write(struct.pack('>%df' % self.n, *self.reproj_error[:self.n]))
        buf.write(struct.pack('>%db' % self.n, *self.match_success[:self.n]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != pvn_eview_map_match_data_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return pvn_eview_map_match_data_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = pvn_eview_map_match_data_t()
        self.n = struct.unpack(">i", buf.read(4))[0]
        self.exemplar_utimes = struct.unpack('>%dq' % self.n, buf.read(self.n * 8))
        self.obs_utimes = struct.unpack('>%dq' % self.n, buf.read(self.n * 8))
        self.obs_num_feats = struct.unpack('>%di' % self.n, buf.read(self.n * 4))
        self.exemplar_num_feats = struct.unpack('>%di' % self.n, buf.read(self.n * 4))
        self.num_inliers = struct.unpack('>%di' % self.n, buf.read(self.n * 4))
        self.reproj_error = struct.unpack('>%df' % self.n, buf.read(self.n * 4))
        self.match_success = struct.unpack('>%db' % self.n, buf.read(self.n))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if pvn_eview_map_match_data_t in parents: return 0
        tmphash = (0x13f67917b7631fba) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if pvn_eview_map_match_data_t._packed_fingerprint is None:
            pvn_eview_map_match_data_t._packed_fingerprint = struct.pack(">Q", pvn_eview_map_match_data_t._get_hash_recursive([]))
        return pvn_eview_map_match_data_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

