"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class carlab_signals_t(object):
    __slots__ = ["utime", "turn_signal", "horn_on", "headlights", "highbeams_on", "foglights_on"]

    TURN_SIGNAL_OFF = 0
    TURN_SIGNAL_LEFT = 1
    TURN_SIGNAL_RIGHT = 2
    TURN_SIGNAL_HAZARD = 3
    HEADLIGHTS_OFF = 0
    HEADLIGHTS_PARKING = 1
    HEADLIGHTS_ON = 2

    def __init__(self):
        self.utime = 0
        self.turn_signal = 0
        self.horn_on = False
        self.headlights = 0
        self.highbeams_on = False
        self.foglights_on = False

    def encode(self):
        buf = BytesIO()
        buf.write(carlab_signals_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qibibb", self.utime, self.turn_signal, self.horn_on, self.headlights, self.highbeams_on, self.foglights_on))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != carlab_signals_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return carlab_signals_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = carlab_signals_t()
        self.utime, self.turn_signal = struct.unpack(">qi", buf.read(12))
        self.horn_on = bool(struct.unpack('b', buf.read(1))[0])
        self.headlights = struct.unpack(">i", buf.read(4))[0]
        self.highbeams_on = bool(struct.unpack('b', buf.read(1))[0])
        self.foglights_on = bool(struct.unpack('b', buf.read(1))[0])
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if carlab_signals_t in parents: return 0
        tmphash = (0x15c8d2420dd2668c) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if carlab_signals_t._packed_fingerprint is None:
            carlab_signals_t._packed_fingerprint = struct.pack(">Q", carlab_signals_t._get_hash_recursive([]))
        return carlab_signals_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

