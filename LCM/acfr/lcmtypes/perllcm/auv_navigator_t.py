"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import perllcm.est_navigator_index_t

class auv_navigator_t(object):
    __slots__ = ["utime", "est_method", "init_data_ready", "filter_running", "state_len", "mu_len", "Sigma_len", "mu", "Sigma", "index", "mu_latitude", "mu_longitude", "org_latitude", "org_longitude"]

    EST_EKF = 1
    EST_UKF = 2
    EST_PF = 3

    def __init__(self):
        self.utime = 0
        self.est_method = 0
        self.init_data_ready = False
        self.filter_running = False
        self.state_len = 0
        self.mu_len = 0
        self.Sigma_len = 0
        self.mu = []
        self.Sigma = []
        self.index = perllcm.est_navigator_index_t()
        self.mu_latitude = 0.0
        self.mu_longitude = 0.0
        self.org_latitude = 0.0
        self.org_longitude = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(auv_navigator_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qhbbiii", self.utime, self.est_method, self.init_data_ready, self.filter_running, self.state_len, self.mu_len, self.Sigma_len))
        buf.write(struct.pack('>%dd' % self.mu_len, *self.mu[:self.mu_len]))
        buf.write(struct.pack('>%dd' % self.Sigma_len, *self.Sigma[:self.Sigma_len]))
        assert self.index._get_packed_fingerprint() == perllcm.est_navigator_index_t._get_packed_fingerprint()
        self.index._encode_one(buf)
        buf.write(struct.pack(">dddd", self.mu_latitude, self.mu_longitude, self.org_latitude, self.org_longitude))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != auv_navigator_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return auv_navigator_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = auv_navigator_t()
        self.utime, self.est_method = struct.unpack(">qh", buf.read(10))
        self.init_data_ready = bool(struct.unpack('b', buf.read(1))[0])
        self.filter_running = bool(struct.unpack('b', buf.read(1))[0])
        self.state_len, self.mu_len, self.Sigma_len = struct.unpack(">iii", buf.read(12))
        self.mu = struct.unpack('>%dd' % self.mu_len, buf.read(self.mu_len * 8))
        self.Sigma = struct.unpack('>%dd' % self.Sigma_len, buf.read(self.Sigma_len * 8))
        self.index = perllcm.est_navigator_index_t._decode_one(buf)
        self.mu_latitude, self.mu_longitude, self.org_latitude, self.org_longitude = struct.unpack(">dddd", buf.read(32))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if auv_navigator_t in parents: return 0
        newparents = parents + [auv_navigator_t]
        tmphash = (0x90b7468db2caae69+ perllcm.est_navigator_index_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if auv_navigator_t._packed_fingerprint is None:
            auv_navigator_t._packed_fingerprint = struct.pack(">Q", auv_navigator_t._get_hash_recursive([]))
        return auv_navigator_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

