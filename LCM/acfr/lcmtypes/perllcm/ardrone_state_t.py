"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class ardrone_state_t(object):
    __slots__ = ["utime", "pitch", "yaw", "roll", "altitude", "vx", "vy", "vz", "battery", "flying", "coms"]

    def __init__(self):
        self.utime = 0
        self.pitch = 0.0
        self.yaw = 0.0
        self.roll = 0.0
        self.altitude = 0.0
        self.vx = 0.0
        self.vy = 0.0
        self.vz = 0.0
        self.battery = 0.0
        self.flying = False
        self.coms = False

    def encode(self):
        buf = BytesIO()
        buf.write(ardrone_state_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qffffffffbb", self.utime, self.pitch, self.yaw, self.roll, self.altitude, self.vx, self.vy, self.vz, self.battery, self.flying, self.coms))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ardrone_state_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ardrone_state_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ardrone_state_t()
        self.utime, self.pitch, self.yaw, self.roll, self.altitude, self.vx, self.vy, self.vz, self.battery = struct.unpack(">qffffffff", buf.read(40))
        self.flying = bool(struct.unpack('b', buf.read(1))[0])
        self.coms = bool(struct.unpack('b', buf.read(1))[0])
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ardrone_state_t in parents: return 0
        tmphash = (0x9271763c30603953) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ardrone_state_t._packed_fingerprint is None:
            ardrone_state_t._packed_fingerprint = struct.pack(">Q", ardrone_state_t._get_hash_recursive([]))
        return ardrone_state_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

