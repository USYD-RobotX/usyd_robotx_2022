"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class velodyne_laser_return_t(object):
    __slots__ = ["xyz", "raw_range", "range", "ctheta", "theta", "phi", "intensity", "physical", "logical", "motion_compensated", "utime"]

    def __init__(self):
        self.xyz = [ 0.0 for dim0 in range(3) ]
        self.raw_range = 0.0
        self.range = 0.0
        self.ctheta = 0.0
        self.theta = 0.0
        self.phi = 0.0
        self.intensity = 0
        self.physical = 0
        self.logical = 0
        self.motion_compensated = 0
        self.utime = 0

    def encode(self):
        buf = BytesIO()
        buf.write(velodyne_laser_return_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>3d', *self.xyz[:3]))
        buf.write(struct.pack(">dddddBiibq", self.raw_range, self.range, self.ctheta, self.theta, self.phi, self.intensity, self.physical, self.logical, self.motion_compensated, self.utime))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != velodyne_laser_return_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return velodyne_laser_return_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = velodyne_laser_return_t()
        self.xyz = struct.unpack('>3d', buf.read(24))
        self.raw_range, self.range, self.ctheta, self.theta, self.phi, self.intensity, self.physical, self.logical, self.motion_compensated, self.utime = struct.unpack(">dddddBiibq", buf.read(58))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if velodyne_laser_return_t in parents: return 0
        tmphash = (0xc0817e92b3017312) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if velodyne_laser_return_t._packed_fingerprint is None:
            velodyne_laser_return_t._packed_fingerprint = struct.pack(">Q", velodyne_laser_return_t._get_hash_recursive([]))
        return velodyne_laser_return_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

