"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class segway_state_t(object):
    __slots__ = ["utime", "pitch_angle", "pitch_rate", "roll_angle", "roll_rate", "left_wheel_velocity", "right_wheel_velocity", "yaw_rate", "servo_frames", "left_wheel_displacement", "right_wheel_displacement", "forward_displacement", "yaw_displacement", "left_motor_torque", "right_motor_torque", "user_voltage", "powerbase_voltage"]

    def __init__(self):
        self.utime = 0
        self.pitch_angle = 0.0
        self.pitch_rate = 0.0
        self.roll_angle = 0.0
        self.roll_rate = 0.0
        self.left_wheel_velocity = 0.0
        self.right_wheel_velocity = 0.0
        self.yaw_rate = 0.0
        self.servo_frames = 0.0
        self.left_wheel_displacement = 0.0
        self.right_wheel_displacement = 0.0
        self.forward_displacement = 0.0
        self.yaw_displacement = 0.0
        self.left_motor_torque = 0.0
        self.right_motor_torque = 0.0
        self.user_voltage = 0.0
        self.powerbase_voltage = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(segway_state_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qffffffffffffffff", self.utime, self.pitch_angle, self.pitch_rate, self.roll_angle, self.roll_rate, self.left_wheel_velocity, self.right_wheel_velocity, self.yaw_rate, self.servo_frames, self.left_wheel_displacement, self.right_wheel_displacement, self.forward_displacement, self.yaw_displacement, self.left_motor_torque, self.right_motor_torque, self.user_voltage, self.powerbase_voltage))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != segway_state_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return segway_state_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = segway_state_t()
        self.utime, self.pitch_angle, self.pitch_rate, self.roll_angle, self.roll_rate, self.left_wheel_velocity, self.right_wheel_velocity, self.yaw_rate, self.servo_frames, self.left_wheel_displacement, self.right_wheel_displacement, self.forward_displacement, self.yaw_displacement, self.left_motor_torque, self.right_motor_torque, self.user_voltage, self.powerbase_voltage = struct.unpack(">qffffffffffffffff", buf.read(72))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if segway_state_t in parents: return 0
        tmphash = (0xf6a21aae9e14125f) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if segway_state_t._packed_fingerprint is None:
            segway_state_t._packed_fingerprint = struct.pack(">Q", segway_state_t._get_hash_recursive([]))
        return segway_state_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

