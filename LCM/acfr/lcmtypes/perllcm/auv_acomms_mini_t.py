"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class auv_acomms_mini_t(object):
    __slots__ = ["utime", "mini_type", "waypoint", "uvc_next_waypoint", "uvc_error"]

    MINI_WAYPOINT = 1
    MINI_ERROR = 2
    ERR_NONE = 0
    ERR_OVER_PITCH = 1
    ERR_EXCEED_TIME = 2
    ERR_LEAK = 3
    ERR_NO_FORWARD_PROG = 4
    ERR_EXCEED_MAX_DEPTH = 5
    ERR_NO_UPWARD_PROG = 6
    ERR_TOW_FLOAT_ENGAGED = 7
    ERR_SAFETY_RET_PATH = 8
    ERR_DFS_UNCHANGED = 9
    ERR_COMPASS_STOPPED = 10
    ERR_EXCEEDED_MIN_REQ_PWR = 11
    ERR_STOP_AND_TRANSMIT_IRIDIUM = 12

    def __init__(self):
        self.utime = 0
        self.mini_type = 0
        self.waypoint = 0
        self.uvc_next_waypoint = 0.0
        self.uvc_error = 0

    def encode(self):
        buf = BytesIO()
        buf.write(auv_acomms_mini_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qiidi", self.utime, self.mini_type, self.waypoint, self.uvc_next_waypoint, self.uvc_error))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != auv_acomms_mini_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return auv_acomms_mini_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = auv_acomms_mini_t()
        self.utime, self.mini_type, self.waypoint, self.uvc_next_waypoint, self.uvc_error = struct.unpack(">qiidi", buf.read(28))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if auv_acomms_mini_t in parents: return 0
        tmphash = (0xe1769a07cb1e76ad) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if auv_acomms_mini_t._packed_fingerprint is None:
            auv_acomms_mini_t._packed_fingerprint = struct.pack(">Q", auv_acomms_mini_t._get_hash_recursive([]))
        return auv_acomms_mini_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

