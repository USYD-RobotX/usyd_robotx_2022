"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import perllcm.pvn_vis_map_cluster_t

class pvn_vis_map_t(object):
    __slots__ = ["orglat", "orglon", "orgalt", "nclusters", "clusters", "xyz_min", "xyz_max", "total_feats"]

    def __init__(self):
        self.orglat = 0.0
        self.orglon = 0.0
        self.orgalt = 0.0
        self.nclusters = 0
        self.clusters = []
        self.xyz_min = [ 0.0 for dim0 in range(3) ]
        self.xyz_max = [ 0.0 for dim0 in range(3) ]
        self.total_feats = 0

    def encode(self):
        buf = BytesIO()
        buf.write(pvn_vis_map_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">dddi", self.orglat, self.orglon, self.orgalt, self.nclusters))
        for i0 in range(self.nclusters):
            assert self.clusters[i0]._get_packed_fingerprint() == perllcm.pvn_vis_map_cluster_t._get_packed_fingerprint()
            self.clusters[i0]._encode_one(buf)
        buf.write(struct.pack('>3d', *self.xyz_min[:3]))
        buf.write(struct.pack('>3d', *self.xyz_max[:3]))
        buf.write(struct.pack(">q", self.total_feats))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != pvn_vis_map_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return pvn_vis_map_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = pvn_vis_map_t()
        self.orglat, self.orglon, self.orgalt, self.nclusters = struct.unpack(">dddi", buf.read(28))
        self.clusters = []
        for i0 in range(self.nclusters):
            self.clusters.append(perllcm.pvn_vis_map_cluster_t._decode_one(buf))
        self.xyz_min = struct.unpack('>3d', buf.read(24))
        self.xyz_max = struct.unpack('>3d', buf.read(24))
        self.total_feats = struct.unpack(">q", buf.read(8))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if pvn_vis_map_t in parents: return 0
        newparents = parents + [pvn_vis_map_t]
        tmphash = (0x73db0fea2ef5f879+ perllcm.pvn_vis_map_cluster_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if pvn_vis_map_t._packed_fingerprint is None:
            pvn_vis_map_t._packed_fingerprint = struct.pack(">Q", pvn_vis_map_t._get_hash_recursive([]))
        return pvn_vis_map_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

