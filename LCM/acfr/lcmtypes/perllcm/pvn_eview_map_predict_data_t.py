"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import perllcm.pvn_conditions_t

class pvn_eview_map_predict_data_t(object):
    __slots__ = ["obs_utime", "obs_conds", "obs_num_feats", "neighborhood_id", "ne", "exemplar_utimes", "p_observations", "inlier_cnts", "exemplar_num_feats", "reproj_error", "match_success"]

    def __init__(self):
        self.obs_utime = 0
        self.obs_conds = perllcm.pvn_conditions_t()
        self.obs_num_feats = 0
        self.neighborhood_id = 0
        self.ne = 0
        self.exemplar_utimes = []
        self.p_observations = []
        self.inlier_cnts = []
        self.exemplar_num_feats = []
        self.reproj_error = []
        self.match_success = []

    def encode(self):
        buf = BytesIO()
        buf.write(pvn_eview_map_predict_data_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.obs_utime))
        assert self.obs_conds._get_packed_fingerprint() == perllcm.pvn_conditions_t._get_packed_fingerprint()
        self.obs_conds._encode_one(buf)
        buf.write(struct.pack(">iqi", self.obs_num_feats, self.neighborhood_id, self.ne))
        buf.write(struct.pack('>%dq' % self.ne, *self.exemplar_utimes[:self.ne]))
        buf.write(struct.pack('>%df' % self.ne, *self.p_observations[:self.ne]))
        buf.write(struct.pack('>%di' % self.ne, *self.inlier_cnts[:self.ne]))
        buf.write(struct.pack('>%di' % self.ne, *self.exemplar_num_feats[:self.ne]))
        buf.write(struct.pack('>%df' % self.ne, *self.reproj_error[:self.ne]))
        buf.write(struct.pack('>%db' % self.ne, *self.match_success[:self.ne]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != pvn_eview_map_predict_data_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return pvn_eview_map_predict_data_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = pvn_eview_map_predict_data_t()
        self.obs_utime = struct.unpack(">q", buf.read(8))[0]
        self.obs_conds = perllcm.pvn_conditions_t._decode_one(buf)
        self.obs_num_feats, self.neighborhood_id, self.ne = struct.unpack(">iqi", buf.read(16))
        self.exemplar_utimes = struct.unpack('>%dq' % self.ne, buf.read(self.ne * 8))
        self.p_observations = struct.unpack('>%df' % self.ne, buf.read(self.ne * 4))
        self.inlier_cnts = struct.unpack('>%di' % self.ne, buf.read(self.ne * 4))
        self.exemplar_num_feats = struct.unpack('>%di' % self.ne, buf.read(self.ne * 4))
        self.reproj_error = struct.unpack('>%df' % self.ne, buf.read(self.ne * 4))
        self.match_success = struct.unpack('>%db' % self.ne, buf.read(self.ne))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if pvn_eview_map_predict_data_t in parents: return 0
        newparents = parents + [pvn_eview_map_predict_data_t]
        tmphash = (0xfe1b1fe1521f7722+ perllcm.pvn_conditions_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if pvn_eview_map_predict_data_t._packed_fingerprint is None:
            pvn_eview_map_predict_data_t._packed_fingerprint = struct.pack(">Q", pvn_eview_map_predict_data_t._get_hash_recursive([]))
        return pvn_eview_map_predict_data_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

