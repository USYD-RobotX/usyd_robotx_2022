"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import perllcm.pvn_conditions_t

import perllcm.pose3d_t

class pvn_eview_map_exemplar_t(object):
    __slots__ = ["utime", "utime_last_match", "x_n_e", "npts", "x", "y", "z", "npts_uv", "u", "v", "keylen", "keys", "vocab_id", "conditions", "max_xyz", "min_xyz"]

    def __init__(self):
        self.utime = 0
        self.utime_last_match = 0
        self.x_n_e = perllcm.pose3d_t()
        self.npts = 0
        self.x = []
        self.y = []
        self.z = []
        self.npts_uv = 0
        self.u = []
        self.v = []
        self.keylen = 0
        self.keys = []
        self.vocab_id = []
        self.conditions = perllcm.pvn_conditions_t()
        self.max_xyz = [ 0.0 for dim0 in range(3) ]
        self.min_xyz = [ 0.0 for dim0 in range(3) ]

    def encode(self):
        buf = BytesIO()
        buf.write(pvn_eview_map_exemplar_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qq", self.utime, self.utime_last_match))
        assert self.x_n_e._get_packed_fingerprint() == perllcm.pose3d_t._get_packed_fingerprint()
        self.x_n_e._encode_one(buf)
        buf.write(struct.pack(">i", self.npts))
        buf.write(struct.pack('>%df' % self.npts, *self.x[:self.npts]))
        buf.write(struct.pack('>%df' % self.npts, *self.y[:self.npts]))
        buf.write(struct.pack('>%df' % self.npts, *self.z[:self.npts]))
        buf.write(struct.pack(">i", self.npts_uv))
        buf.write(struct.pack('>%df' % self.npts_uv, *self.u[:self.npts_uv]))
        buf.write(struct.pack('>%df' % self.npts_uv, *self.v[:self.npts_uv]))
        buf.write(struct.pack(">i", self.keylen))
        for i0 in range(self.npts):
            buf.write(struct.pack('>%df' % self.keylen, *self.keys[i0][:self.keylen]))
        buf.write(struct.pack('>%di' % self.npts, *self.vocab_id[:self.npts]))
        assert self.conditions._get_packed_fingerprint() == perllcm.pvn_conditions_t._get_packed_fingerprint()
        self.conditions._encode_one(buf)
        buf.write(struct.pack('>3f', *self.max_xyz[:3]))
        buf.write(struct.pack('>3f', *self.min_xyz[:3]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != pvn_eview_map_exemplar_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return pvn_eview_map_exemplar_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = pvn_eview_map_exemplar_t()
        self.utime, self.utime_last_match = struct.unpack(">qq", buf.read(16))
        self.x_n_e = perllcm.pose3d_t._decode_one(buf)
        self.npts = struct.unpack(">i", buf.read(4))[0]
        self.x = struct.unpack('>%df' % self.npts, buf.read(self.npts * 4))
        self.y = struct.unpack('>%df' % self.npts, buf.read(self.npts * 4))
        self.z = struct.unpack('>%df' % self.npts, buf.read(self.npts * 4))
        self.npts_uv = struct.unpack(">i", buf.read(4))[0]
        self.u = struct.unpack('>%df' % self.npts_uv, buf.read(self.npts_uv * 4))
        self.v = struct.unpack('>%df' % self.npts_uv, buf.read(self.npts_uv * 4))
        self.keylen = struct.unpack(">i", buf.read(4))[0]
        self.keys = []
        for i0 in range(self.npts):
            self.keys.append(struct.unpack('>%df' % self.keylen, buf.read(self.keylen * 4)))
        self.vocab_id = struct.unpack('>%di' % self.npts, buf.read(self.npts * 4))
        self.conditions = perllcm.pvn_conditions_t._decode_one(buf)
        self.max_xyz = struct.unpack('>3f', buf.read(12))
        self.min_xyz = struct.unpack('>3f', buf.read(12))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if pvn_eview_map_exemplar_t in parents: return 0
        newparents = parents + [pvn_eview_map_exemplar_t]
        tmphash = (0xc50fd2f59cb0027b+ perllcm.pose3d_t._get_hash_recursive(newparents)+ perllcm.pvn_conditions_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if pvn_eview_map_exemplar_t._packed_fingerprint is None:
            pvn_eview_map_exemplar_t._packed_fingerprint = struct.pack(">Q", pvn_eview_map_exemplar_t._get_hash_recursive([]))
        return pvn_eview_map_exemplar_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

