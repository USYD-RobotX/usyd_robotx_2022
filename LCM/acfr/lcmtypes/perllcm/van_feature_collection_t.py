"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import perllcm.van_scene_prior_t

import perllcm.van_feature_t

import perllcm.van_calib_t

class van_feature_collection_t(object):
    __slots__ = ["utime", "channel", "ntypes", "f", "calib", "scene_prior"]

    def __init__(self):
        self.utime = 0
        self.channel = ""
        self.ntypes = 0
        self.f = []
        self.calib = perllcm.van_calib_t()
        self.scene_prior = perllcm.van_scene_prior_t()

    def encode(self):
        buf = BytesIO()
        buf.write(van_feature_collection_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.utime))
        __channel_encoded = self.channel.encode('utf-8')
        buf.write(struct.pack('>I', len(__channel_encoded)+1))
        buf.write(__channel_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">i", self.ntypes))
        for i0 in range(self.ntypes):
            assert self.f[i0]._get_packed_fingerprint() == perllcm.van_feature_t._get_packed_fingerprint()
            self.f[i0]._encode_one(buf)
        assert self.calib._get_packed_fingerprint() == perllcm.van_calib_t._get_packed_fingerprint()
        self.calib._encode_one(buf)
        assert self.scene_prior._get_packed_fingerprint() == perllcm.van_scene_prior_t._get_packed_fingerprint()
        self.scene_prior._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != van_feature_collection_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return van_feature_collection_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = van_feature_collection_t()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        __channel_len = struct.unpack('>I', buf.read(4))[0]
        self.channel = buf.read(__channel_len)[:-1].decode('utf-8', 'replace')
        self.ntypes = struct.unpack(">i", buf.read(4))[0]
        self.f = []
        for i0 in range(self.ntypes):
            self.f.append(perllcm.van_feature_t._decode_one(buf))
        self.calib = perllcm.van_calib_t._decode_one(buf)
        self.scene_prior = perllcm.van_scene_prior_t._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if van_feature_collection_t in parents: return 0
        newparents = parents + [van_feature_collection_t]
        tmphash = (0xd9a00ad9f34e6a10+ perllcm.van_feature_t._get_hash_recursive(newparents)+ perllcm.van_calib_t._get_hash_recursive(newparents)+ perllcm.van_scene_prior_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if van_feature_collection_t._packed_fingerprint is None:
            van_feature_collection_t._packed_fingerprint = struct.pack(">Q", van_feature_collection_t._get_hash_recursive([]))
        return van_feature_collection_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

