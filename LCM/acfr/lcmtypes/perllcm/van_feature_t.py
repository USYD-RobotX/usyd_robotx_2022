"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class van_feature_t(object):
    __slots__ = ["utime", "npts", "u", "v", "keylen", "keys", "attrtype", "attrsize", "attr", "usertype", "usersize", "user"]

    ATTRTYPE_NONE = 0
    ATTRTYPE_CVSURF = 1
    ATTRTYPE_CVHARRIS = 2
    ATTRTYPE_SIFTGPU = 4
    ATTRTYPE_SURFGPU = 8
    USERTYPE_NONE = 0
    USERTYPE_DEPTH = 1

    def __init__(self):
        self.utime = 0
        self.npts = 0
        self.u = []
        self.v = []
        self.keylen = 0
        self.keys = []
        self.attrtype = 0
        self.attrsize = 0
        self.attr = ""
        self.usertype = 0
        self.usersize = 0
        self.user = ""

    def encode(self):
        buf = BytesIO()
        buf.write(van_feature_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.utime, self.npts))
        buf.write(struct.pack('>%df' % self.npts, *self.u[:self.npts]))
        buf.write(struct.pack('>%df' % self.npts, *self.v[:self.npts]))
        buf.write(struct.pack(">i", self.keylen))
        for i0 in range(self.npts):
            buf.write(struct.pack('>%df' % self.keylen, *self.keys[i0][:self.keylen]))
        buf.write(struct.pack(">ii", self.attrtype, self.attrsize))
        buf.write(bytearray(self.attr[:self.attrsize]))
        buf.write(struct.pack(">ii", self.usertype, self.usersize))
        buf.write(bytearray(self.user[:self.usersize]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != van_feature_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return van_feature_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = van_feature_t()
        self.utime, self.npts = struct.unpack(">qi", buf.read(12))
        self.u = struct.unpack('>%df' % self.npts, buf.read(self.npts * 4))
        self.v = struct.unpack('>%df' % self.npts, buf.read(self.npts * 4))
        self.keylen = struct.unpack(">i", buf.read(4))[0]
        self.keys = []
        for i0 in range(self.npts):
            self.keys.append(struct.unpack('>%df' % self.keylen, buf.read(self.keylen * 4)))
        self.attrtype, self.attrsize = struct.unpack(">ii", buf.read(8))
        self.attr = buf.read(self.attrsize)
        self.usertype, self.usersize = struct.unpack(">ii", buf.read(8))
        self.user = buf.read(self.usersize)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if van_feature_t in parents: return 0
        tmphash = (0xe46485a54a3a03cd) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if van_feature_t._packed_fingerprint is None:
            van_feature_t._packed_fingerprint = struct.pack(">Q", van_feature_t._get_hash_recursive([]))
        return van_feature_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

