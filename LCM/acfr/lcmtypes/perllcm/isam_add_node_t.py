"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class isam_add_node_t(object):
    __slots__ = ["utime", "id", "node_type", "has_mu_o", "mu_o", "sensor_id"]

    NODE_POSE2D = 1
    NODE_POSE3D = 2
    NODE_POINT2D = 3
    NODE_POINT3D = 4
    NODE_PLANE3D = 5
    NODE_NOSENSOR = 0
    NODE_ODO = 1
    NODE_SONAR = 2
    NODE_CAMERA = 4
    NODE_3D_LASER = 8
    NODE_2D_LASER = 16
    NODE_OMNI_CAMERA = 32

    def __init__(self):
        self.utime = 0
        self.id = 0
        self.node_type = 0
        self.has_mu_o = 0
        self.mu_o = [ 0.0 for dim0 in range(6) ]
        self.sensor_id = 0

    def encode(self):
        buf = BytesIO()
        buf.write(isam_add_node_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qqhb", self.utime, self.id, self.node_type, self.has_mu_o))
        buf.write(struct.pack('>6d', *self.mu_o[:6]))
        buf.write(struct.pack(">h", self.sensor_id))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != isam_add_node_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return isam_add_node_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = isam_add_node_t()
        self.utime, self.id, self.node_type, self.has_mu_o = struct.unpack(">qqhb", buf.read(19))
        self.mu_o = struct.unpack('>6d', buf.read(48))
        self.sensor_id = struct.unpack(">h", buf.read(2))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if isam_add_node_t in parents: return 0
        tmphash = (0x75b0ffa2b1571f61) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if isam_add_node_t._packed_fingerprint is None:
            isam_add_node_t._packed_fingerprint = struct.pack(">Q", isam_add_node_t._get_hash_recursive([]))
        return isam_add_node_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

