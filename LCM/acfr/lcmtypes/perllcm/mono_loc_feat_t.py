"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class mono_loc_feat_t(object):
    __slots__ = ["desc", "X", "view_aiz"]

    def __init__(self):
        self.desc = [ 0.0 for dim0 in range(128) ]
        self.X = [ 0.0 for dim0 in range(3) ]
        self.view_aiz = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(mono_loc_feat_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>128d', *self.desc[:128]))
        buf.write(struct.pack('>3d', *self.X[:3]))
        buf.write(struct.pack(">d", self.view_aiz))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != mono_loc_feat_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return mono_loc_feat_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = mono_loc_feat_t()
        self.desc = struct.unpack('>128d', buf.read(1024))
        self.X = struct.unpack('>3d', buf.read(24))
        self.view_aiz = struct.unpack(">d", buf.read(8))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if mono_loc_feat_t in parents: return 0
        tmphash = (0xe3156efa76e22c31) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if mono_loc_feat_t._packed_fingerprint is None:
            mono_loc_feat_t._packed_fingerprint = struct.pack(">Q", mono_loc_feat_t._get_hash_recursive([]))
        return mono_loc_feat_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

