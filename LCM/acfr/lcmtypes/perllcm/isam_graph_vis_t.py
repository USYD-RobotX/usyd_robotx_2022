"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class isam_graph_vis_t(object):
    __slots__ = ["utime", "nnodes", "mu", "node_id", "nlinks", "links_i", "links_j", "link_sensor_id", "covariance"]

    def __init__(self):
        self.utime = 0
        self.nnodes = 0
        self.mu = []
        self.node_id = []
        self.nlinks = 0
        self.links_i = []
        self.links_j = []
        self.link_sensor_id = []
        self.covariance = [ 0.0 for dim0 in range(36) ]

    def encode(self):
        buf = BytesIO()
        buf.write(isam_graph_vis_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.utime, self.nnodes))
        for i0 in range(self.nnodes):
            buf.write(struct.pack('>6d', *self.mu[i0][:6]))
        buf.write(struct.pack('>%dq' % self.nnodes, *self.node_id[:self.nnodes]))
        buf.write(struct.pack(">i", self.nlinks))
        buf.write(struct.pack('>%dq' % self.nlinks, *self.links_i[:self.nlinks]))
        buf.write(struct.pack('>%dq' % self.nlinks, *self.links_j[:self.nlinks]))
        buf.write(struct.pack('>%di' % self.nlinks, *self.link_sensor_id[:self.nlinks]))
        buf.write(struct.pack('>36d', *self.covariance[:36]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != isam_graph_vis_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return isam_graph_vis_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = isam_graph_vis_t()
        self.utime, self.nnodes = struct.unpack(">qi", buf.read(12))
        self.mu = []
        for i0 in range(self.nnodes):
            self.mu.append(struct.unpack('>6d', buf.read(48)))
        self.node_id = struct.unpack('>%dq' % self.nnodes, buf.read(self.nnodes * 8))
        self.nlinks = struct.unpack(">i", buf.read(4))[0]
        self.links_i = struct.unpack('>%dq' % self.nlinks, buf.read(self.nlinks * 8))
        self.links_j = struct.unpack('>%dq' % self.nlinks, buf.read(self.nlinks * 8))
        self.link_sensor_id = struct.unpack('>%di' % self.nlinks, buf.read(self.nlinks * 4))
        self.covariance = struct.unpack('>36d', buf.read(288))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if isam_graph_vis_t in parents: return 0
        tmphash = (0x96ec9ee0a461f417) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if isam_graph_vis_t._packed_fingerprint is None:
            isam_graph_vis_t._packed_fingerprint = struct.pack(">Q", isam_graph_vis_t._get_hash_recursive([]))
        return isam_graph_vis_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

