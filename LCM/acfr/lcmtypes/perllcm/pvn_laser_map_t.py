"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import perllcm.velodyne_laser_return_collection_t

import perllcm.color_byte_collection_t

class pvn_laser_map_t(object):
    __slots__ = ["num_lrcs", "lrcs", "num_rgbcs", "rgbcs", "orglat", "orglon", "orgalt", "xyz_min", "xyz_max", "total_lr"]

    def __init__(self):
        self.num_lrcs = 0
        self.lrcs = []
        self.num_rgbcs = 0
        self.rgbcs = []
        self.orglat = 0.0
        self.orglon = 0.0
        self.orgalt = 0.0
        self.xyz_min = [ 0.0 for dim0 in range(3) ]
        self.xyz_max = [ 0.0 for dim0 in range(3) ]
        self.total_lr = 0

    def encode(self):
        buf = BytesIO()
        buf.write(pvn_laser_map_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.num_lrcs))
        for i0 in range(self.num_lrcs):
            assert self.lrcs[i0]._get_packed_fingerprint() == perllcm.velodyne_laser_return_collection_t._get_packed_fingerprint()
            self.lrcs[i0]._encode_one(buf)
        buf.write(struct.pack(">i", self.num_rgbcs))
        for i0 in range(self.num_rgbcs):
            assert self.rgbcs[i0]._get_packed_fingerprint() == perllcm.color_byte_collection_t._get_packed_fingerprint()
            self.rgbcs[i0]._encode_one(buf)
        buf.write(struct.pack(">ddd", self.orglat, self.orglon, self.orgalt))
        buf.write(struct.pack('>3d', *self.xyz_min[:3]))
        buf.write(struct.pack('>3d', *self.xyz_max[:3]))
        buf.write(struct.pack(">q", self.total_lr))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != pvn_laser_map_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return pvn_laser_map_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = pvn_laser_map_t()
        self.num_lrcs = struct.unpack(">i", buf.read(4))[0]
        self.lrcs = []
        for i0 in range(self.num_lrcs):
            self.lrcs.append(perllcm.velodyne_laser_return_collection_t._decode_one(buf))
        self.num_rgbcs = struct.unpack(">i", buf.read(4))[0]
        self.rgbcs = []
        for i0 in range(self.num_rgbcs):
            self.rgbcs.append(perllcm.color_byte_collection_t._decode_one(buf))
        self.orglat, self.orglon, self.orgalt = struct.unpack(">ddd", buf.read(24))
        self.xyz_min = struct.unpack('>3d', buf.read(24))
        self.xyz_max = struct.unpack('>3d', buf.read(24))
        self.total_lr = struct.unpack(">q", buf.read(8))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if pvn_laser_map_t in parents: return 0
        newparents = parents + [pvn_laser_map_t]
        tmphash = (0xfbabfc0c72c6b4a6+ perllcm.velodyne_laser_return_collection_t._get_hash_recursive(newparents)+ perllcm.color_byte_collection_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if pvn_laser_map_t._packed_fingerprint is None:
            pvn_laser_map_t._packed_fingerprint = struct.pack(">Q", pvn_laser_map_t._get_hash_recursive([]))
        return pvn_laser_map_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

