"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import perllcm.color_float_t

import perllcm.point3d_float_t

class point3d_list_t(object):
    __slots__ = ["id", "npoints", "points", "ncolors", "colors", "pointids"]

    def __init__(self):
        self.id = 0
        self.npoints = 0
        self.points = []
        self.ncolors = 0
        self.colors = []
        self.pointids = []

    def encode(self):
        buf = BytesIO()
        buf.write(point3d_list_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.id, self.npoints))
        for i0 in range(self.npoints):
            assert self.points[i0]._get_packed_fingerprint() == perllcm.point3d_float_t._get_packed_fingerprint()
            self.points[i0]._encode_one(buf)
        buf.write(struct.pack(">i", self.ncolors))
        for i0 in range(self.ncolors):
            assert self.colors[i0]._get_packed_fingerprint() == perllcm.color_float_t._get_packed_fingerprint()
            self.colors[i0]._encode_one(buf)
        buf.write(struct.pack('>%dq' % self.ncolors, *self.pointids[:self.ncolors]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != point3d_list_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return point3d_list_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = point3d_list_t()
        self.id, self.npoints = struct.unpack(">qi", buf.read(12))
        self.points = []
        for i0 in range(self.npoints):
            self.points.append(perllcm.point3d_float_t._decode_one(buf))
        self.ncolors = struct.unpack(">i", buf.read(4))[0]
        self.colors = []
        for i0 in range(self.ncolors):
            self.colors.append(perllcm.color_float_t._decode_one(buf))
        self.pointids = struct.unpack('>%dq' % self.ncolors, buf.read(self.ncolors * 8))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if point3d_list_t in parents: return 0
        newparents = parents + [point3d_list_t]
        tmphash = (0x48f413bcdffd07ae+ perllcm.point3d_float_t._get_hash_recursive(newparents)+ perllcm.color_float_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if point3d_list_t._packed_fingerprint is None:
            point3d_list_t._packed_fingerprint = struct.pack(">Q", point3d_list_t._get_hash_recursive([]))
        return point3d_list_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

