"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class van_plot_debug_t(object):
    __slots__ = ["utime_i", "utime_j", "n_feat_types", "npts_each_type", "n_in_pccs", "isel_pccs_i", "isel_pccs_j", "n_in", "isel", "model", "dof", "nav21", "x21", "cov21", "npts3d", "x", "y", "z", "plt_ellipses", "img_w", "img_h", "chiSquare2dof", "F21", "uv1_sample", "uv2p_sample", "cov2p_sample", "uv2_sample", "uv1p_sample", "cov1p_sample", "model_gic", "reg_result", "errmsg", "nlink_remaining"]

    GIC_NONE = 0
    GIC_H = 1
    GIC_F = 2
    REG_FAIL = 0
    REG_SUCC = 1
    MSG_INVALID = 0
    MSG_VALID = 1
    MSG_QUIT = 2
    MSG_BATCH = 3

    def __init__(self):
        self.utime_i = 0
        self.utime_j = 0
        self.n_feat_types = 0
        self.npts_each_type = []
        self.n_in_pccs = 0
        self.isel_pccs_i = []
        self.isel_pccs_j = []
        self.n_in = 0
        self.isel = []
        self.model = [ 0.0 for dim0 in range(9) ]
        self.dof = 0
        self.nav21 = [ 0.0 for dim0 in range(6) ]
        self.x21 = [ 0.0 for dim0 in range(6) ]
        self.cov21 = [ 0.0 for dim0 in range(36) ]
        self.npts3d = 0
        self.x = []
        self.y = []
        self.z = []
        self.plt_ellipses = False
        self.img_w = 0
        self.img_h = 0
        self.chiSquare2dof = 0.0
        self.F21 = [ 0.0 for dim0 in range(9) ]
        self.uv1_sample = [ 0.0 for dim0 in range(16) ]
        self.uv2p_sample = [ 0.0 for dim0 in range(16) ]
        self.cov2p_sample = [ 0.0 for dim0 in range(32) ]
        self.uv2_sample = [ 0.0 for dim0 in range(16) ]
        self.uv1p_sample = [ 0.0 for dim0 in range(16) ]
        self.cov1p_sample = [ 0.0 for dim0 in range(32) ]
        self.model_gic = 0
        self.reg_result = 0
        self.errmsg = 0
        self.nlink_remaining = 0

    def encode(self):
        buf = BytesIO()
        buf.write(van_plot_debug_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qqi", self.utime_i, self.utime_j, self.n_feat_types))
        buf.write(struct.pack('>%di' % self.n_feat_types, *self.npts_each_type[:self.n_feat_types]))
        buf.write(struct.pack(">i", self.n_in_pccs))
        buf.write(struct.pack('>%di' % self.n_in_pccs, *self.isel_pccs_i[:self.n_in_pccs]))
        buf.write(struct.pack('>%di' % self.n_in_pccs, *self.isel_pccs_j[:self.n_in_pccs]))
        buf.write(struct.pack(">i", self.n_in))
        buf.write(struct.pack('>%di' % self.n_in, *self.isel[:self.n_in]))
        buf.write(struct.pack('>9d', *self.model[:9]))
        buf.write(struct.pack(">i", self.dof))
        buf.write(struct.pack('>6d', *self.nav21[:6]))
        buf.write(struct.pack('>6d', *self.x21[:6]))
        buf.write(struct.pack('>36d', *self.cov21[:36]))
        buf.write(struct.pack(">i", self.npts3d))
        buf.write(struct.pack('>%df' % self.npts3d, *self.x[:self.npts3d]))
        buf.write(struct.pack('>%df' % self.npts3d, *self.y[:self.npts3d]))
        buf.write(struct.pack('>%df' % self.npts3d, *self.z[:self.npts3d]))
        buf.write(struct.pack(">biid", self.plt_ellipses, self.img_w, self.img_h, self.chiSquare2dof))
        buf.write(struct.pack('>9d', *self.F21[:9]))
        buf.write(struct.pack('>16f', *self.uv1_sample[:16]))
        buf.write(struct.pack('>16f', *self.uv2p_sample[:16]))
        buf.write(struct.pack('>32f', *self.cov2p_sample[:32]))
        buf.write(struct.pack('>16f', *self.uv2_sample[:16]))
        buf.write(struct.pack('>16f', *self.uv1p_sample[:16]))
        buf.write(struct.pack('>32f', *self.cov1p_sample[:32]))
        buf.write(struct.pack(">iiii", self.model_gic, self.reg_result, self.errmsg, self.nlink_remaining))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != van_plot_debug_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return van_plot_debug_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = van_plot_debug_t()
        self.utime_i, self.utime_j, self.n_feat_types = struct.unpack(">qqi", buf.read(20))
        self.npts_each_type = struct.unpack('>%di' % self.n_feat_types, buf.read(self.n_feat_types * 4))
        self.n_in_pccs = struct.unpack(">i", buf.read(4))[0]
        self.isel_pccs_i = struct.unpack('>%di' % self.n_in_pccs, buf.read(self.n_in_pccs * 4))
        self.isel_pccs_j = struct.unpack('>%di' % self.n_in_pccs, buf.read(self.n_in_pccs * 4))
        self.n_in = struct.unpack(">i", buf.read(4))[0]
        self.isel = struct.unpack('>%di' % self.n_in, buf.read(self.n_in * 4))
        self.model = struct.unpack('>9d', buf.read(72))
        self.dof = struct.unpack(">i", buf.read(4))[0]
        self.nav21 = struct.unpack('>6d', buf.read(48))
        self.x21 = struct.unpack('>6d', buf.read(48))
        self.cov21 = struct.unpack('>36d', buf.read(288))
        self.npts3d = struct.unpack(">i", buf.read(4))[0]
        self.x = struct.unpack('>%df' % self.npts3d, buf.read(self.npts3d * 4))
        self.y = struct.unpack('>%df' % self.npts3d, buf.read(self.npts3d * 4))
        self.z = struct.unpack('>%df' % self.npts3d, buf.read(self.npts3d * 4))
        self.plt_ellipses = bool(struct.unpack('b', buf.read(1))[0])
        self.img_w, self.img_h, self.chiSquare2dof = struct.unpack(">iid", buf.read(16))
        self.F21 = struct.unpack('>9d', buf.read(72))
        self.uv1_sample = struct.unpack('>16f', buf.read(64))
        self.uv2p_sample = struct.unpack('>16f', buf.read(64))
        self.cov2p_sample = struct.unpack('>32f', buf.read(128))
        self.uv2_sample = struct.unpack('>16f', buf.read(64))
        self.uv1p_sample = struct.unpack('>16f', buf.read(64))
        self.cov1p_sample = struct.unpack('>32f', buf.read(128))
        self.model_gic, self.reg_result, self.errmsg, self.nlink_remaining = struct.unpack(">iiii", buf.read(16))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if van_plot_debug_t in parents: return 0
        tmphash = (0x482360540e8029b9) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if van_plot_debug_t._packed_fingerprint is None:
            van_plot_debug_t._packed_fingerprint = struct.pack(">Q", van_plot_debug_t._get_hash_recursive([]))
        return van_plot_debug_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

