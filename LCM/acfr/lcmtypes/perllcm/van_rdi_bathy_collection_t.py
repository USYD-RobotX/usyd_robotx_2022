"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import perllcm.rdi_bathy_t

import perllcm.pose3d_t

import perllcm.van_calib_t

class van_rdi_bathy_collection_t(object):
    __slots__ = ["id", "npts", "bathy_v", "x_vc", "calib_list", "ncalib", "calib"]

    def __init__(self):
        self.id = 0
        self.npts = 0
        self.bathy_v = []
        self.x_vc = []
        self.calib_list = []
        self.ncalib = 0
        self.calib = []

    def encode(self):
        buf = BytesIO()
        buf.write(van_rdi_bathy_collection_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.id, self.npts))
        for i0 in range(self.npts):
            assert self.bathy_v[i0]._get_packed_fingerprint() == perllcm.rdi_bathy_t._get_packed_fingerprint()
            self.bathy_v[i0]._encode_one(buf)
        for i0 in range(self.npts):
            assert self.x_vc[i0]._get_packed_fingerprint() == perllcm.pose3d_t._get_packed_fingerprint()
            self.x_vc[i0]._encode_one(buf)
        buf.write(struct.pack('>%di' % self.npts, *self.calib_list[:self.npts]))
        buf.write(struct.pack(">i", self.ncalib))
        for i0 in range(self.ncalib):
            assert self.calib[i0]._get_packed_fingerprint() == perllcm.van_calib_t._get_packed_fingerprint()
            self.calib[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != van_rdi_bathy_collection_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return van_rdi_bathy_collection_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = van_rdi_bathy_collection_t()
        self.id, self.npts = struct.unpack(">qi", buf.read(12))
        self.bathy_v = []
        for i0 in range(self.npts):
            self.bathy_v.append(perllcm.rdi_bathy_t._decode_one(buf))
        self.x_vc = []
        for i0 in range(self.npts):
            self.x_vc.append(perllcm.pose3d_t._decode_one(buf))
        self.calib_list = struct.unpack('>%di' % self.npts, buf.read(self.npts * 4))
        self.ncalib = struct.unpack(">i", buf.read(4))[0]
        self.calib = []
        for i0 in range(self.ncalib):
            self.calib.append(perllcm.van_calib_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if van_rdi_bathy_collection_t in parents: return 0
        newparents = parents + [van_rdi_bathy_collection_t]
        tmphash = (0xf0c6270472910a00+ perllcm.rdi_bathy_t._get_hash_recursive(newparents)+ perllcm.pose3d_t._get_hash_recursive(newparents)+ perllcm.van_calib_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if van_rdi_bathy_collection_t._packed_fingerprint is None:
            van_rdi_bathy_collection_t._packed_fingerprint = struct.pack(">Q", van_rdi_bathy_collection_t._get_hash_recursive([]))
        return van_rdi_bathy_collection_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

