"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class carlab_state_t(object):
    __slots__ = ["utime", "XGV_NM_alive", "XGV_PD_alive", "XGV_VSS_alive", "XGV_MPD_alive", "XGV_SigD_alive", "XGV_EM_alive", "XGV_NM_status", "XGV_PD_status", "XGV_MPD_status", "fuel_level", "RF_wheel_speed", "LF_wheel_speed", "RR_wheel_speed", "LR_wheel_speed", "curvature", "velocity", "error_count", "PD_control", "MPD_control"]

    STATUS_INITIALIZE = 0
    STATUS_READY = 1
    STATUS_STANDBY = 2
    STATUS_SHUTDOWN = 3
    STATUS_FAILURE = 4
    STATUS_EMERGENCY = 5

    def __init__(self):
        self.utime = 0
        self.XGV_NM_alive = False
        self.XGV_PD_alive = False
        self.XGV_VSS_alive = False
        self.XGV_MPD_alive = False
        self.XGV_SigD_alive = False
        self.XGV_EM_alive = False
        self.XGV_NM_status = 0
        self.XGV_PD_status = 0
        self.XGV_MPD_status = 0
        self.fuel_level = 0.0
        self.RF_wheel_speed = 0.0
        self.LF_wheel_speed = 0.0
        self.RR_wheel_speed = 0.0
        self.LR_wheel_speed = 0.0
        self.curvature = 0.0
        self.velocity = 0.0
        self.error_count = 0
        self.PD_control = ""
        self.MPD_control = ""

    def encode(self):
        buf = BytesIO()
        buf.write(carlab_state_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qbbbbbbiiifffffffi", self.utime, self.XGV_NM_alive, self.XGV_PD_alive, self.XGV_VSS_alive, self.XGV_MPD_alive, self.XGV_SigD_alive, self.XGV_EM_alive, self.XGV_NM_status, self.XGV_PD_status, self.XGV_MPD_status, self.fuel_level, self.RF_wheel_speed, self.LF_wheel_speed, self.RR_wheel_speed, self.LR_wheel_speed, self.curvature, self.velocity, self.error_count))
        __PD_control_encoded = self.PD_control.encode('utf-8')
        buf.write(struct.pack('>I', len(__PD_control_encoded)+1))
        buf.write(__PD_control_encoded)
        buf.write(b"\0")
        __MPD_control_encoded = self.MPD_control.encode('utf-8')
        buf.write(struct.pack('>I', len(__MPD_control_encoded)+1))
        buf.write(__MPD_control_encoded)
        buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != carlab_state_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return carlab_state_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = carlab_state_t()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        self.XGV_NM_alive = bool(struct.unpack('b', buf.read(1))[0])
        self.XGV_PD_alive = bool(struct.unpack('b', buf.read(1))[0])
        self.XGV_VSS_alive = bool(struct.unpack('b', buf.read(1))[0])
        self.XGV_MPD_alive = bool(struct.unpack('b', buf.read(1))[0])
        self.XGV_SigD_alive = bool(struct.unpack('b', buf.read(1))[0])
        self.XGV_EM_alive = bool(struct.unpack('b', buf.read(1))[0])
        self.XGV_NM_status, self.XGV_PD_status, self.XGV_MPD_status, self.fuel_level, self.RF_wheel_speed, self.LF_wheel_speed, self.RR_wheel_speed, self.LR_wheel_speed, self.curvature, self.velocity, self.error_count = struct.unpack(">iiifffffffi", buf.read(44))
        __PD_control_len = struct.unpack('>I', buf.read(4))[0]
        self.PD_control = buf.read(__PD_control_len)[:-1].decode('utf-8', 'replace')
        __MPD_control_len = struct.unpack('>I', buf.read(4))[0]
        self.MPD_control = buf.read(__MPD_control_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if carlab_state_t in parents: return 0
        tmphash = (0x263687dce8746968) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if carlab_state_t._packed_fingerprint is None:
            carlab_state_t._packed_fingerprint = struct.pack(">Q", carlab_state_t._get_hash_recursive([]))
        return carlab_state_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

