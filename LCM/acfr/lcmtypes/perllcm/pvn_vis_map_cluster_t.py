"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class pvn_vis_map_cluster_t(object):
    __slots__ = ["mean_xyz", "mean_view_aiz", "npts", "x", "y", "z", "view_aiz", "keylen", "keys", "key_scale", "key_orientation", "vocab_id", "build_key_update_cnt", "build_xyz_update_cnt"]

    def __init__(self):
        self.mean_xyz = [ 0.0 for dim0 in range(3) ]
        self.mean_view_aiz = 0.0
        self.npts = 0
        self.x = []
        self.y = []
        self.z = []
        self.view_aiz = []
        self.keylen = 0
        self.keys = []
        self.key_scale = []
        self.key_orientation = []
        self.vocab_id = []
        self.build_key_update_cnt = []
        self.build_xyz_update_cnt = []

    def encode(self):
        buf = BytesIO()
        buf.write(pvn_vis_map_cluster_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>3f', *self.mean_xyz[:3]))
        buf.write(struct.pack(">fi", self.mean_view_aiz, self.npts))
        buf.write(struct.pack('>%df' % self.npts, *self.x[:self.npts]))
        buf.write(struct.pack('>%df' % self.npts, *self.y[:self.npts]))
        buf.write(struct.pack('>%df' % self.npts, *self.z[:self.npts]))
        buf.write(struct.pack('>%df' % self.npts, *self.view_aiz[:self.npts]))
        buf.write(struct.pack(">i", self.keylen))
        for i0 in range(self.npts):
            buf.write(struct.pack('>%df' % self.keylen, *self.keys[i0][:self.keylen]))
        buf.write(struct.pack('>%df' % self.npts, *self.key_scale[:self.npts]))
        buf.write(struct.pack('>%df' % self.npts, *self.key_orientation[:self.npts]))
        buf.write(struct.pack('>%di' % self.npts, *self.vocab_id[:self.npts]))
        buf.write(struct.pack('>%di' % self.npts, *self.build_key_update_cnt[:self.npts]))
        buf.write(struct.pack('>%di' % self.npts, *self.build_xyz_update_cnt[:self.npts]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != pvn_vis_map_cluster_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return pvn_vis_map_cluster_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = pvn_vis_map_cluster_t()
        self.mean_xyz = struct.unpack('>3f', buf.read(12))
        self.mean_view_aiz, self.npts = struct.unpack(">fi", buf.read(8))
        self.x = struct.unpack('>%df' % self.npts, buf.read(self.npts * 4))
        self.y = struct.unpack('>%df' % self.npts, buf.read(self.npts * 4))
        self.z = struct.unpack('>%df' % self.npts, buf.read(self.npts * 4))
        self.view_aiz = struct.unpack('>%df' % self.npts, buf.read(self.npts * 4))
        self.keylen = struct.unpack(">i", buf.read(4))[0]
        self.keys = []
        for i0 in range(self.npts):
            self.keys.append(struct.unpack('>%df' % self.keylen, buf.read(self.keylen * 4)))
        self.key_scale = struct.unpack('>%df' % self.npts, buf.read(self.npts * 4))
        self.key_orientation = struct.unpack('>%df' % self.npts, buf.read(self.npts * 4))
        self.vocab_id = struct.unpack('>%di' % self.npts, buf.read(self.npts * 4))
        self.build_key_update_cnt = struct.unpack('>%di' % self.npts, buf.read(self.npts * 4))
        self.build_xyz_update_cnt = struct.unpack('>%di' % self.npts, buf.read(self.npts * 4))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if pvn_vis_map_cluster_t in parents: return 0
        tmphash = (0x5cf02c79040d0a74) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if pvn_vis_map_cluster_t._packed_fingerprint is None:
            pvn_vis_map_cluster_t._packed_fingerprint = struct.pack(">Q", pvn_vis_map_cluster_t._get_hash_recursive([]))
        return pvn_vis_map_cluster_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

