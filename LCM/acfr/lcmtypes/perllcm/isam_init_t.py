"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class isam_init_t(object):
    __slots__ = ["utime", "verbose", "quiet", "force_numerical_jacobian", "method", "epsilon1", "epsilon2", "epsilon3", "epsilon_abs", "epsilon_rel", "max_iterations", "lm_lambda0", "lm_lambda_factor", "continuable", "last_lambda", "mod_update", "mod_batch", "mod_solve"]

    GAUSS_NEWTON = 1
    LEVENBERG_MARQUARDT = 2
    DOG_LEG = 3

    def __init__(self):
        self.utime = 0
        self.verbose = 0
        self.quiet = 0
        self.force_numerical_jacobian = 0
        self.method = 0
        self.epsilon1 = 0.0
        self.epsilon2 = 0.0
        self.epsilon3 = 0.0
        self.epsilon_abs = 0.0
        self.epsilon_rel = 0.0
        self.max_iterations = 0
        self.lm_lambda0 = 0.0
        self.lm_lambda_factor = 0.0
        self.continuable = 0
        self.last_lambda = 0.0
        self.mod_update = 0
        self.mod_batch = 0
        self.mod_solve = 0

    def encode(self):
        buf = BytesIO()
        buf.write(isam_init_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qbbbidddddiddbdiii", self.utime, self.verbose, self.quiet, self.force_numerical_jacobian, self.method, self.epsilon1, self.epsilon2, self.epsilon3, self.epsilon_abs, self.epsilon_rel, self.max_iterations, self.lm_lambda0, self.lm_lambda_factor, self.continuable, self.last_lambda, self.mod_update, self.mod_batch, self.mod_solve))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != isam_init_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return isam_init_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = isam_init_t()
        self.utime, self.verbose, self.quiet, self.force_numerical_jacobian, self.method, self.epsilon1, self.epsilon2, self.epsilon3, self.epsilon_abs, self.epsilon_rel, self.max_iterations, self.lm_lambda0, self.lm_lambda_factor, self.continuable, self.last_lambda, self.mod_update, self.mod_batch, self.mod_solve = struct.unpack(">qbbbidddddiddbdiii", buf.read(96))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if isam_init_t in parents: return 0
        tmphash = (0xda23e1956949ce8b) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if isam_init_t._packed_fingerprint is None:
            isam_init_t._packed_fingerprint = struct.pack(">Q", isam_init_t._get_hash_recursive([]))
        return isam_init_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

