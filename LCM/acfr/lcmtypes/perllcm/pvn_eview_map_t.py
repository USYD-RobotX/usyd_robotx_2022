"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import perllcm.pvn_eview_map_predict_data_collection_t

import perllcm.pvn_eview_map_match_data_t

import perllcm.pose3d_t

class pvn_eview_map_t(object):
    __slots__ = ["orglat", "orglon", "orgalt", "nn", "neighborhood_ids", "neighborhood_poses", "nr", "match_data", "predict_data_colls"]

    def __init__(self):
        self.orglat = 0.0
        self.orglon = 0.0
        self.orgalt = 0.0
        self.nn = 0
        self.neighborhood_ids = []
        self.neighborhood_poses = []
        self.nr = 0
        self.match_data = []
        self.predict_data_colls = []

    def encode(self):
        buf = BytesIO()
        buf.write(pvn_eview_map_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">dddi", self.orglat, self.orglon, self.orgalt, self.nn))
        buf.write(struct.pack('>%dq' % self.nn, *self.neighborhood_ids[:self.nn]))
        for i0 in range(self.nn):
            assert self.neighborhood_poses[i0]._get_packed_fingerprint() == perllcm.pose3d_t._get_packed_fingerprint()
            self.neighborhood_poses[i0]._encode_one(buf)
        buf.write(struct.pack(">i", self.nr))
        for i0 in range(self.nr):
            assert self.match_data[i0]._get_packed_fingerprint() == perllcm.pvn_eview_map_match_data_t._get_packed_fingerprint()
            self.match_data[i0]._encode_one(buf)
        for i0 in range(self.nr):
            assert self.predict_data_colls[i0]._get_packed_fingerprint() == perllcm.pvn_eview_map_predict_data_collection_t._get_packed_fingerprint()
            self.predict_data_colls[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != pvn_eview_map_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return pvn_eview_map_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = pvn_eview_map_t()
        self.orglat, self.orglon, self.orgalt, self.nn = struct.unpack(">dddi", buf.read(28))
        self.neighborhood_ids = struct.unpack('>%dq' % self.nn, buf.read(self.nn * 8))
        self.neighborhood_poses = []
        for i0 in range(self.nn):
            self.neighborhood_poses.append(perllcm.pose3d_t._decode_one(buf))
        self.nr = struct.unpack(">i", buf.read(4))[0]
        self.match_data = []
        for i0 in range(self.nr):
            self.match_data.append(perllcm.pvn_eview_map_match_data_t._decode_one(buf))
        self.predict_data_colls = []
        for i0 in range(self.nr):
            self.predict_data_colls.append(perllcm.pvn_eview_map_predict_data_collection_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if pvn_eview_map_t in parents: return 0
        newparents = parents + [pvn_eview_map_t]
        tmphash = (0xa65a4d4a6ffd6dd9+ perllcm.pose3d_t._get_hash_recursive(newparents)+ perllcm.pvn_eview_map_match_data_t._get_hash_recursive(newparents)+ perllcm.pvn_eview_map_predict_data_collection_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if pvn_eview_map_t._packed_fingerprint is None:
            pvn_eview_map_t._packed_fingerprint = struct.pack(">Q", pvn_eview_map_t._get_hash_recursive([]))
        return pvn_eview_map_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

