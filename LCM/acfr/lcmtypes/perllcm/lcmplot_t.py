"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class lcmplot_t(object):
    __slots__ = ["utime", "npts", "pts", "label"]

    def __init__(self):
        self.utime = 0
        self.npts = 0
        self.pts = []
        self.label = []

    def encode(self):
        buf = BytesIO()
        buf.write(lcmplot_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.utime, self.npts))
        buf.write(struct.pack('>%dd' % self.npts, *self.pts[:self.npts]))
        for i0 in range(self.npts):
            __label_encoded = self.label[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__label_encoded)+1))
            buf.write(__label_encoded)
            buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != lcmplot_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return lcmplot_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = lcmplot_t()
        self.utime, self.npts = struct.unpack(">qi", buf.read(12))
        self.pts = struct.unpack('>%dd' % self.npts, buf.read(self.npts * 8))
        self.label = []
        for i0 in range(self.npts):
            __label_len = struct.unpack('>I', buf.read(4))[0]
            self.label.append(buf.read(__label_len)[:-1].decode('utf-8', 'replace'))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if lcmplot_t in parents: return 0
        tmphash = (0x9f4823d2adec59d9) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if lcmplot_t._packed_fingerprint is None:
            lcmplot_t._packed_fingerprint = struct.pack(">Q", lcmplot_t._get_hash_recursive([]))
        return lcmplot_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

