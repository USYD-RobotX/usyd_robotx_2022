"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class van_vlink_t(object):
    __slots__ = ["utime_i", "utime_j", "type", "msg", "z", "R", "n_inliers", "isel_i", "isel_j", "S_L", "Ig"]

    TYPE_ERROR = -1
    TYPE_5DOF_EPIPOLAR = 1
    TYPE_5DOF_HOMOGRAPHY = 2
    MSG_NO_ERROR = 0
    MSG_MIN_PCCS = 1
    MSG_MIN_INLIERS_E = 2
    MSG_MIN_INLIERS_H = 3
    MSG_SBA_E_ERROR = 4
    MSG_SBA_H_ERROR = 5
    MSG_NO_MODEL_FIT = 6
    MSG_MDIST_NAV = 7
    MSG_TRI_CONST = 8

    def __init__(self):
        self.utime_i = 0
        self.utime_j = 0
        self.type = 0
        self.msg = 0
        self.z = [ 0.0 for dim0 in range(6) ]
        self.R = [ 0.0 for dim0 in range(36) ]
        self.n_inliers = 0
        self.isel_i = []
        self.isel_j = []
        self.S_L = 0.0
        self.Ig = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(van_vlink_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qqii", self.utime_i, self.utime_j, self.type, self.msg))
        buf.write(struct.pack('>6d', *self.z[:6]))
        buf.write(struct.pack('>36d', *self.R[:36]))
        buf.write(struct.pack(">i", self.n_inliers))
        buf.write(struct.pack('>%di' % self.n_inliers, *self.isel_i[:self.n_inliers]))
        buf.write(struct.pack('>%di' % self.n_inliers, *self.isel_j[:self.n_inliers]))
        buf.write(struct.pack(">dd", self.S_L, self.Ig))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != van_vlink_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return van_vlink_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = van_vlink_t()
        self.utime_i, self.utime_j, self.type, self.msg = struct.unpack(">qqii", buf.read(24))
        self.z = struct.unpack('>6d', buf.read(48))
        self.R = struct.unpack('>36d', buf.read(288))
        self.n_inliers = struct.unpack(">i", buf.read(4))[0]
        self.isel_i = struct.unpack('>%di' % self.n_inliers, buf.read(self.n_inliers * 4))
        self.isel_j = struct.unpack('>%di' % self.n_inliers, buf.read(self.n_inliers * 4))
        self.S_L, self.Ig = struct.unpack(">dd", buf.read(16))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if van_vlink_t in parents: return 0
        tmphash = (0xf25da72b82244a09) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if van_vlink_t._packed_fingerprint is None:
            van_vlink_t._packed_fingerprint = struct.pack(">Q", van_vlink_t._get_hash_recursive([]))
        return van_vlink_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

