"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import perllcm.pose3d_t

class isam_plink_t(object):
    __slots__ = ["utime_i", "utime_j", "prior", "x_ji", "link_id", "sensor_id"]

    def __init__(self):
        self.utime_i = 0
        self.utime_j = 0
        self.prior = False
        self.x_ji = perllcm.pose3d_t()
        self.link_id = 0
        self.sensor_id = 0

    def encode(self):
        buf = BytesIO()
        buf.write(isam_plink_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qqb", self.utime_i, self.utime_j, self.prior))
        assert self.x_ji._get_packed_fingerprint() == perllcm.pose3d_t._get_packed_fingerprint()
        self.x_ji._encode_one(buf)
        buf.write(struct.pack(">ii", self.link_id, self.sensor_id))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != isam_plink_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return isam_plink_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = isam_plink_t()
        self.utime_i, self.utime_j = struct.unpack(">qq", buf.read(16))
        self.prior = bool(struct.unpack('b', buf.read(1))[0])
        self.x_ji = perllcm.pose3d_t._decode_one(buf)
        self.link_id, self.sensor_id = struct.unpack(">ii", buf.read(8))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if isam_plink_t in parents: return 0
        newparents = parents + [isam_plink_t]
        tmphash = (0xed5c67a790351ca6+ perllcm.pose3d_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if isam_plink_t._packed_fingerprint is None:
            isam_plink_t._packed_fingerprint = struct.pack(">Q", isam_plink_t._get_hash_recursive([]))
        return isam_plink_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

