"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class float_acomm_status_t(object):
    __slots__ = ["timestamp", "depth", "altitude", "ctl_mode", "ctl_status", "volume_cmd", "volume_actual", "thrust_cmd", "leg_time", "mis_time", "leg_num", "mis_status", "leg_type", "bat_charge", "arduino_status"]

    def __init__(self):
        self.timestamp = 0
        self.depth = 0
        self.altitude = 0
        self.ctl_mode = 0
        self.ctl_status = 0
        self.volume_cmd = 0
        self.volume_actual = 0
        self.thrust_cmd = 0
        self.leg_time = 0
        self.mis_time = 0
        self.leg_num = 0
        self.mis_status = 0
        self.leg_type = 0
        self.bat_charge = 0
        self.arduino_status = 0

    def encode(self):
        buf = BytesIO()
        buf.write(float_acomm_status_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ihhbbhhbiihibbb", self.timestamp, self.depth, self.altitude, self.ctl_mode, self.ctl_status, self.volume_cmd, self.volume_actual, self.thrust_cmd, self.leg_time, self.mis_time, self.leg_num, self.mis_status, self.leg_type, self.bat_charge, self.arduino_status))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != float_acomm_status_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return float_acomm_status_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = float_acomm_status_t()
        self.timestamp, self.depth, self.altitude, self.ctl_mode, self.ctl_status, self.volume_cmd, self.volume_actual, self.thrust_cmd, self.leg_time, self.mis_time, self.leg_num, self.mis_status, self.leg_type, self.bat_charge, self.arduino_status = struct.unpack(">ihhbbhhbiihibbb", buf.read(32))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if float_acomm_status_t in parents: return 0
        tmphash = (0x811ccdbb9c12525e) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if float_acomm_status_t._packed_fingerprint is None:
            float_acomm_status_t._packed_fingerprint = struct.pack(">Q", float_acomm_status_t._get_hash_recursive([]))
        return float_acomm_status_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

