"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import bot_procman.sheriff_cmd2_t

class orders2_t(object):
    __slots__ = ["utime", "host", "sheriff_name", "ncmds", "cmds", "num_options", "option_names", "option_values"]

    def __init__(self):
        self.utime = 0
        self.host = ""
        self.sheriff_name = ""
        self.ncmds = 0
        self.cmds = []
        self.num_options = 0
        self.option_names = []
        self.option_values = []

    def encode(self):
        buf = BytesIO()
        buf.write(orders2_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.utime))
        __host_encoded = self.host.encode('utf-8')
        buf.write(struct.pack('>I', len(__host_encoded)+1))
        buf.write(__host_encoded)
        buf.write(b"\0")
        __sheriff_name_encoded = self.sheriff_name.encode('utf-8')
        buf.write(struct.pack('>I', len(__sheriff_name_encoded)+1))
        buf.write(__sheriff_name_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">i", self.ncmds))
        for i0 in range(self.ncmds):
            assert self.cmds[i0]._get_packed_fingerprint() == bot_procman.sheriff_cmd2_t._get_packed_fingerprint()
            self.cmds[i0]._encode_one(buf)
        buf.write(struct.pack(">i", self.num_options))
        for i0 in range(self.num_options):
            __option_names_encoded = self.option_names[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__option_names_encoded)+1))
            buf.write(__option_names_encoded)
            buf.write(b"\0")
        for i0 in range(self.num_options):
            __option_values_encoded = self.option_values[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__option_values_encoded)+1))
            buf.write(__option_values_encoded)
            buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != orders2_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return orders2_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = orders2_t()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        __host_len = struct.unpack('>I', buf.read(4))[0]
        self.host = buf.read(__host_len)[:-1].decode('utf-8', 'replace')
        __sheriff_name_len = struct.unpack('>I', buf.read(4))[0]
        self.sheriff_name = buf.read(__sheriff_name_len)[:-1].decode('utf-8', 'replace')
        self.ncmds = struct.unpack(">i", buf.read(4))[0]
        self.cmds = []
        for i0 in range(self.ncmds):
            self.cmds.append(bot_procman.sheriff_cmd2_t._decode_one(buf))
        self.num_options = struct.unpack(">i", buf.read(4))[0]
        self.option_names = []
        for i0 in range(self.num_options):
            __option_names_len = struct.unpack('>I', buf.read(4))[0]
            self.option_names.append(buf.read(__option_names_len)[:-1].decode('utf-8', 'replace'))
        self.option_values = []
        for i0 in range(self.num_options):
            __option_values_len = struct.unpack('>I', buf.read(4))[0]
            self.option_values.append(buf.read(__option_values_len)[:-1].decode('utf-8', 'replace'))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if orders2_t in parents: return 0
        newparents = parents + [orders2_t]
        tmphash = (0x76e9952102b8c9f4+ bot_procman.sheriff_cmd2_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if orders2_t._packed_fingerprint is None:
            orders2_t._packed_fingerprint = struct.pack(">Q", orders2_t._get_hash_recursive([]))
        return orders2_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

