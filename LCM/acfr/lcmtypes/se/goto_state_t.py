"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class goto_state_t(object):
    __slots__ = ["mode", "waypoint_horizontal", "waypoint_vertical", "original_horizontal", "original_vertical", "waypoint", "original"]

    def __init__(self):
        self.mode = 0
        self.waypoint_horizontal = 0.0
        self.waypoint_vertical = 0.0
        self.original_horizontal = 0.0
        self.original_vertical = 0.0
        self.waypoint = [ 0.0 for dim0 in range(6) ]
        self.original = [ 0.0 for dim0 in range(6) ]

    def encode(self):
        buf = BytesIO()
        buf.write(goto_state_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">idddd", self.mode, self.waypoint_horizontal, self.waypoint_vertical, self.original_horizontal, self.original_vertical))
        buf.write(struct.pack('>6d', *self.waypoint[:6]))
        buf.write(struct.pack('>6d', *self.original[:6]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != goto_state_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return goto_state_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = goto_state_t()
        self.mode, self.waypoint_horizontal, self.waypoint_vertical, self.original_horizontal, self.original_vertical = struct.unpack(">idddd", buf.read(36))
        self.waypoint = struct.unpack('>6d', buf.read(48))
        self.original = struct.unpack('>6d', buf.read(48))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if goto_state_t in parents: return 0
        tmphash = (0xf134d6ec59fa34c9) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if goto_state_t._packed_fingerprint is None:
            goto_state_t._packed_fingerprint = struct.pack(">Q", goto_state_t._get_hash_recursive([]))
        return goto_state_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

