"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class option_t(object):
    __slots__ = ["mode", "savepath", "graphfile", "load_done", "utime_conn", "cov_conn"]

    MODE_WAIT = 0
    MODE_SAVE = 1
    MODE_LOAD = 2
    MODE_START = 3
    MODE_BATCH = 4

    def __init__(self):
        self.mode = 0
        self.savepath = ""
        self.graphfile = ""
        self.load_done = False
        self.utime_conn = 0
        self.cov_conn = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(option_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.mode))
        __savepath_encoded = self.savepath.encode('utf-8')
        buf.write(struct.pack('>I', len(__savepath_encoded)+1))
        buf.write(__savepath_encoded)
        buf.write(b"\0")
        __graphfile_encoded = self.graphfile.encode('utf-8')
        buf.write(struct.pack('>I', len(__graphfile_encoded)+1))
        buf.write(__graphfile_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">bqd", self.load_done, self.utime_conn, self.cov_conn))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != option_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return option_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = option_t()
        self.mode = struct.unpack(">i", buf.read(4))[0]
        __savepath_len = struct.unpack('>I', buf.read(4))[0]
        self.savepath = buf.read(__savepath_len)[:-1].decode('utf-8', 'replace')
        __graphfile_len = struct.unpack('>I', buf.read(4))[0]
        self.graphfile = buf.read(__graphfile_len)[:-1].decode('utf-8', 'replace')
        self.load_done = bool(struct.unpack('b', buf.read(1))[0])
        self.utime_conn, self.cov_conn = struct.unpack(">qd", buf.read(16))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if option_t in parents: return 0
        tmphash = (0xac8942ed88ecc09d) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if option_t._packed_fingerprint is None:
            option_t._packed_fingerprint = struct.pack(">Q", option_t._get_hash_recursive([]))
        return option_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

