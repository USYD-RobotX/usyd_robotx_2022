"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class save_isam_t(object):
    __slots__ = ["timestamp", "id", "n", "line", "type", "sensor"]

    TYPE_DONE = 0
    TYPE_NODE = 1
    TYPE_FACTOR = 2
    SENSOR_UNKNOWN = 0
    SENSOR_ODO = 1
    SENSOR_SONAR = 2
    SENSOR_CAMERA = 3
    SENSOR_RPZ = 4

    def __init__(self):
        self.timestamp = 0
        self.id = 0
        self.n = 0
        self.line = ""
        self.type = 0
        self.sensor = 0

    def encode(self):
        buf = BytesIO()
        buf.write(save_isam_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qqi", self.timestamp, self.id, self.n))
        __line_encoded = self.line.encode('utf-8')
        buf.write(struct.pack('>I', len(__line_encoded)+1))
        buf.write(__line_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">hh", self.type, self.sensor))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != save_isam_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return save_isam_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = save_isam_t()
        self.timestamp, self.id, self.n = struct.unpack(">qqi", buf.read(20))
        __line_len = struct.unpack('>I', buf.read(4))[0]
        self.line = buf.read(__line_len)[:-1].decode('utf-8', 'replace')
        self.type, self.sensor = struct.unpack(">hh", buf.read(4))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if save_isam_t in parents: return 0
        tmphash = (0x1c6014cf23ddc2ed) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if save_isam_t._packed_fingerprint is None:
            save_isam_t._packed_fingerprint = struct.pack(">Q", save_isam_t._get_hash_recursive([]))
        return save_isam_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

