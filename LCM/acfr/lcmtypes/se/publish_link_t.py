"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class publish_link_t(object):
    __slots__ = ["utime1", "utime2", "n", "measurement", "n2", "sigma", "link_type", "publisher_id", "sensor_id", "link_id", "accept", "accept_code", "comment"]

    LINK_ACCEPTED = 1
    LINK_INVALID_MODEL = 2
    LINK_LOW_THRESHOLD = 3
    LINK_MIN_CORR = 4
    LINK_MIN_INLIERS = 5
    LINK_SBA = 6
    LINK_MDIST_NAV = 7
    LINK_POSE2D = 1
    LINK_POSE3D = 2
    LINK_POSE2DB = 3
    LINK_POSE3DB = 4
    LINK_SONAR2D = 5

    def __init__(self):
        self.utime1 = 0
        self.utime2 = 0
        self.n = 0
        self.measurement = []
        self.n2 = 0
        self.sigma = []
        self.link_type = 0
        self.publisher_id = 0
        self.sensor_id = 0
        self.link_id = 0
        self.accept = False
        self.accept_code = 0
        self.comment = ""

    def encode(self):
        buf = BytesIO()
        buf.write(publish_link_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qqi", self.utime1, self.utime2, self.n))
        buf.write(struct.pack('>%dd' % self.n, *self.measurement[:self.n]))
        buf.write(struct.pack(">i", self.n2))
        buf.write(struct.pack('>%dd' % self.n2, *self.sigma[:self.n2]))
        buf.write(struct.pack(">hiiibi", self.link_type, self.publisher_id, self.sensor_id, self.link_id, self.accept, self.accept_code))
        __comment_encoded = self.comment.encode('utf-8')
        buf.write(struct.pack('>I', len(__comment_encoded)+1))
        buf.write(__comment_encoded)
        buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != publish_link_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return publish_link_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = publish_link_t()
        self.utime1, self.utime2, self.n = struct.unpack(">qqi", buf.read(20))
        self.measurement = struct.unpack('>%dd' % self.n, buf.read(self.n * 8))
        self.n2 = struct.unpack(">i", buf.read(4))[0]
        self.sigma = struct.unpack('>%dd' % self.n2, buf.read(self.n2 * 8))
        self.link_type, self.publisher_id, self.sensor_id, self.link_id = struct.unpack(">hiii", buf.read(14))
        self.accept = bool(struct.unpack('b', buf.read(1))[0])
        self.accept_code = struct.unpack(">i", buf.read(4))[0]
        __comment_len = struct.unpack('>I', buf.read(4))[0]
        self.comment = buf.read(__comment_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if publish_link_t in parents: return 0
        tmphash = (0x71bc62a6b3404e74) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if publish_link_t._packed_fingerprint is None:
            publish_link_t._packed_fingerprint = struct.pack(">Q", publish_link_t._get_hash_recursive([]))
        return publish_link_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

