"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import se.pose_t

class return_state_t(object):
    __slots__ = ["utime", "n", "poses", "k", "timestamps", "m", "covariance", "state_type"]

    POSE = 1
    COV_FULL = 2
    COV_BLOCK = 4
    COV_RIGHTCOL = 8

    def __init__(self):
        self.utime = 0
        self.n = 0
        self.poses = []
        self.k = 0
        self.timestamps = []
        self.m = 0
        self.covariance = []
        self.state_type = 0

    def encode(self):
        buf = BytesIO()
        buf.write(return_state_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.utime, self.n))
        for i0 in range(self.n):
            assert self.poses[i0]._get_packed_fingerprint() == se.pose_t._get_packed_fingerprint()
            self.poses[i0]._encode_one(buf)
        buf.write(struct.pack(">i", self.k))
        buf.write(struct.pack('>%dq' % self.k, *self.timestamps[:self.k]))
        buf.write(struct.pack(">i", self.m))
        buf.write(struct.pack('>%dd' % self.m, *self.covariance[:self.m]))
        buf.write(struct.pack(">h", self.state_type))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != return_state_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return return_state_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = return_state_t()
        self.utime, self.n = struct.unpack(">qi", buf.read(12))
        self.poses = []
        for i0 in range(self.n):
            self.poses.append(se.pose_t._decode_one(buf))
        self.k = struct.unpack(">i", buf.read(4))[0]
        self.timestamps = struct.unpack('>%dq' % self.k, buf.read(self.k * 8))
        self.m = struct.unpack(">i", buf.read(4))[0]
        self.covariance = struct.unpack('>%dd' % self.m, buf.read(self.m * 8))
        self.state_type = struct.unpack(">h", buf.read(2))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if return_state_t in parents: return 0
        newparents = parents + [return_state_t]
        tmphash = (0x99d9bd57529d23bc+ se.pose_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if return_state_t._packed_fingerprint is None:
            return_state_t._packed_fingerprint = struct.pack(">Q", return_state_t._get_hash_recursive([]))
        return return_state_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

