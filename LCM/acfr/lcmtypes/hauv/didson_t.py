"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class didson_t(object):
    __slots__ = ["m_nFrameNumber", "m_tFrameTime", "m_nVersion", "m_nStatus", "m_nYear", "m_nMonth", "m_nDay", "m_nHour", "m_nMinute", "m_nSecond", "m_nHSecond", "m_nTransmitMode", "m_nWindowStart", "m_nWindowLength", "m_nThreshold", "m_nIntensity", "m_nReceiverGain", "m_nDegC", "m_nDegC2", "m_nHumidity", "m_nFocus", "m_nBattery", "m_fUserValue1", "m_fUserValue2", "m_fUserValue3", "m_fUserValue4", "m_fUserValue5", "m_fUserValue6", "m_fUserValue7", "m_fUserValue8", "m_fVelocity", "m_fDepth", "m_fAltitude", "m_fPitch", "m_fPitchRate", "m_fRoll", "m_fRollRate", "m_fHeading", "m_fHeadingRate", "m_fCompassHeading", "m_fCompassPitch", "m_fCompassRoll", "m_dLatitude", "m_dLongitude", "m_fSonarPosition", "m_nConfigFlags", "m_nPrismTilt", "m_fTargetRange", "m_fTargetBearing", "m_bTargetPresent", "m_nFirmwareRevision", "m_nFlags", "m_nSourceFrame", "m_fWaterTemp", "m_nTimerPeriod", "m_fSonarX", "m_fSonarY", "m_fSonarZ", "m_fSonarPan", "m_fSonarTilt", "m_fSonarRoll", "m_fPanPNNL", "m_fTiltPNNL", "m_fRollPNNL", "m_dVehicleTime", "m_fTimeGGK", "m_nDateGGK", "m_nQualityGGK", "m_nNumSatsGGK", "m_fDOPGGK", "m_fEHTGGK", "m_fHeaveTSS", "m_nYearGPS", "m_nMonthGPS", "m_nDayGPS", "m_nHourGPS", "m_nMinuteGPS", "m_nSecondGPS", "m_nHSecondGPS", "m_fSonarPanOffset", "m_fSonarTiltOffset", "m_fSonarRollOffset", "m_fSonarXOffset", "m_fSonarYOffset", "m_fSonarZOffset", "m_fTMatrix", "m_cRsvdData", "m_cData", "time_first_packet"]

    def __init__(self):
        self.m_nFrameNumber = 0
        self.m_tFrameTime = 0
        self.m_nVersion = 0
        self.m_nStatus = 0
        self.m_nYear = 0
        self.m_nMonth = 0
        self.m_nDay = 0
        self.m_nHour = 0
        self.m_nMinute = 0
        self.m_nSecond = 0
        self.m_nHSecond = 0
        self.m_nTransmitMode = 0
        self.m_nWindowStart = 0
        self.m_nWindowLength = 0
        self.m_nThreshold = 0
        self.m_nIntensity = 0
        self.m_nReceiverGain = 0
        self.m_nDegC = 0
        self.m_nDegC2 = 0
        self.m_nHumidity = 0
        self.m_nFocus = 0
        self.m_nBattery = 0
        self.m_fUserValue1 = 0.0
        self.m_fUserValue2 = 0.0
        self.m_fUserValue3 = 0.0
        self.m_fUserValue4 = 0.0
        self.m_fUserValue5 = 0.0
        self.m_fUserValue6 = 0.0
        self.m_fUserValue7 = 0.0
        self.m_fUserValue8 = 0.0
        self.m_fVelocity = 0.0
        self.m_fDepth = 0.0
        self.m_fAltitude = 0.0
        self.m_fPitch = 0.0
        self.m_fPitchRate = 0.0
        self.m_fRoll = 0.0
        self.m_fRollRate = 0.0
        self.m_fHeading = 0.0
        self.m_fHeadingRate = 0.0
        self.m_fCompassHeading = 0.0
        self.m_fCompassPitch = 0.0
        self.m_fCompassRoll = 0.0
        self.m_dLatitude = 0.0
        self.m_dLongitude = 0.0
        self.m_fSonarPosition = 0.0
        self.m_nConfigFlags = 0
        self.m_nPrismTilt = 0
        self.m_fTargetRange = 0.0
        self.m_fTargetBearing = 0.0
        self.m_bTargetPresent = False
        self.m_nFirmwareRevision = 0
        self.m_nFlags = 0
        self.m_nSourceFrame = 0
        self.m_fWaterTemp = 0.0
        self.m_nTimerPeriod = 0
        self.m_fSonarX = 0.0
        self.m_fSonarY = 0.0
        self.m_fSonarZ = 0.0
        self.m_fSonarPan = 0.0
        self.m_fSonarTilt = 0.0
        self.m_fSonarRoll = 0.0
        self.m_fPanPNNL = 0.0
        self.m_fTiltPNNL = 0.0
        self.m_fRollPNNL = 0.0
        self.m_dVehicleTime = 0.0
        self.m_fTimeGGK = 0.0
        self.m_nDateGGK = 0
        self.m_nQualityGGK = 0
        self.m_nNumSatsGGK = 0
        self.m_fDOPGGK = 0.0
        self.m_fEHTGGK = 0.0
        self.m_fHeaveTSS = 0.0
        self.m_nYearGPS = 0
        self.m_nMonthGPS = 0
        self.m_nDayGPS = 0
        self.m_nHourGPS = 0
        self.m_nMinuteGPS = 0
        self.m_nSecondGPS = 0
        self.m_nHSecondGPS = 0
        self.m_fSonarPanOffset = 0.0
        self.m_fSonarTiltOffset = 0.0
        self.m_fSonarRollOffset = 0.0
        self.m_fSonarXOffset = 0.0
        self.m_fSonarYOffset = 0.0
        self.m_fSonarZOffset = 0.0
        self.m_fTMatrix = [ 0.0 for dim0 in range(16) ]
        self.m_cRsvdData = ""
        self.m_cData = ""
        self.time_first_packet = 0

    def encode(self):
        buf = BytesIO()
        buf.write(didson_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iqiiiiiiiiiiiiiiiiiiiiffffffffffffffffffffddfiiffbiiififffffffffdfiiifffiiiiiiiffffff", self.m_nFrameNumber, self.m_tFrameTime, self.m_nVersion, self.m_nStatus, self.m_nYear, self.m_nMonth, self.m_nDay, self.m_nHour, self.m_nMinute, self.m_nSecond, self.m_nHSecond, self.m_nTransmitMode, self.m_nWindowStart, self.m_nWindowLength, self.m_nThreshold, self.m_nIntensity, self.m_nReceiverGain, self.m_nDegC, self.m_nDegC2, self.m_nHumidity, self.m_nFocus, self.m_nBattery, self.m_fUserValue1, self.m_fUserValue2, self.m_fUserValue3, self.m_fUserValue4, self.m_fUserValue5, self.m_fUserValue6, self.m_fUserValue7, self.m_fUserValue8, self.m_fVelocity, self.m_fDepth, self.m_fAltitude, self.m_fPitch, self.m_fPitchRate, self.m_fRoll, self.m_fRollRate, self.m_fHeading, self.m_fHeadingRate, self.m_fCompassHeading, self.m_fCompassPitch, self.m_fCompassRoll, self.m_dLatitude, self.m_dLongitude, self.m_fSonarPosition, self.m_nConfigFlags, self.m_nPrismTilt, self.m_fTargetRange, self.m_fTargetBearing, self.m_bTargetPresent, self.m_nFirmwareRevision, self.m_nFlags, self.m_nSourceFrame, self.m_fWaterTemp, self.m_nTimerPeriod, self.m_fSonarX, self.m_fSonarY, self.m_fSonarZ, self.m_fSonarPan, self.m_fSonarTilt, self.m_fSonarRoll, self.m_fPanPNNL, self.m_fTiltPNNL, self.m_fRollPNNL, self.m_dVehicleTime, self.m_fTimeGGK, self.m_nDateGGK, self.m_nQualityGGK, self.m_nNumSatsGGK, self.m_fDOPGGK, self.m_fEHTGGK, self.m_fHeaveTSS, self.m_nYearGPS, self.m_nMonthGPS, self.m_nDayGPS, self.m_nHourGPS, self.m_nMinuteGPS, self.m_nSecondGPS, self.m_nHSecondGPS, self.m_fSonarPanOffset, self.m_fSonarTiltOffset, self.m_fSonarRollOffset, self.m_fSonarXOffset, self.m_fSonarYOffset, self.m_fSonarZOffset))
        buf.write(struct.pack('>16f', *self.m_fTMatrix[:16]))
        buf.write(bytearray(self.m_cRsvdData[:604]))
        buf.write(bytearray(self.m_cData[:49152]))
        buf.write(struct.pack(">q", self.time_first_packet))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != didson_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return didson_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = didson_t()
        self.m_nFrameNumber, self.m_tFrameTime, self.m_nVersion, self.m_nStatus, self.m_nYear, self.m_nMonth, self.m_nDay, self.m_nHour, self.m_nMinute, self.m_nSecond, self.m_nHSecond, self.m_nTransmitMode, self.m_nWindowStart, self.m_nWindowLength, self.m_nThreshold, self.m_nIntensity, self.m_nReceiverGain, self.m_nDegC, self.m_nDegC2, self.m_nHumidity, self.m_nFocus, self.m_nBattery, self.m_fUserValue1, self.m_fUserValue2, self.m_fUserValue3, self.m_fUserValue4, self.m_fUserValue5, self.m_fUserValue6, self.m_fUserValue7, self.m_fUserValue8, self.m_fVelocity, self.m_fDepth, self.m_fAltitude, self.m_fPitch, self.m_fPitchRate, self.m_fRoll, self.m_fRollRate, self.m_fHeading, self.m_fHeadingRate, self.m_fCompassHeading, self.m_fCompassPitch, self.m_fCompassRoll, self.m_dLatitude, self.m_dLongitude, self.m_fSonarPosition, self.m_nConfigFlags, self.m_nPrismTilt, self.m_fTargetRange, self.m_fTargetBearing = struct.unpack(">iqiiiiiiiiiiiiiiiiiiiiffffffffffffffffffffddfiiff", buf.read(208))
        self.m_bTargetPresent = bool(struct.unpack('b', buf.read(1))[0])
        self.m_nFirmwareRevision, self.m_nFlags, self.m_nSourceFrame, self.m_fWaterTemp, self.m_nTimerPeriod, self.m_fSonarX, self.m_fSonarY, self.m_fSonarZ, self.m_fSonarPan, self.m_fSonarTilt, self.m_fSonarRoll, self.m_fPanPNNL, self.m_fTiltPNNL, self.m_fRollPNNL, self.m_dVehicleTime, self.m_fTimeGGK, self.m_nDateGGK, self.m_nQualityGGK, self.m_nNumSatsGGK, self.m_fDOPGGK, self.m_fEHTGGK, self.m_fHeaveTSS, self.m_nYearGPS, self.m_nMonthGPS, self.m_nDayGPS, self.m_nHourGPS, self.m_nMinuteGPS, self.m_nSecondGPS, self.m_nHSecondGPS, self.m_fSonarPanOffset, self.m_fSonarTiltOffset, self.m_fSonarRollOffset, self.m_fSonarXOffset, self.m_fSonarYOffset, self.m_fSonarZOffset = struct.unpack(">iiififffffffffdfiiifffiiiiiiiffffff", buf.read(144))
        self.m_fTMatrix = struct.unpack('>16f', buf.read(64))
        self.m_cRsvdData = buf.read(604)
        self.m_cData = buf.read(49152)
        self.time_first_packet = struct.unpack(">q", buf.read(8))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if didson_t in parents: return 0
        tmphash = (0x8c1bccefe738a4c3) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if didson_t._packed_fingerprint is None:
            didson_t._packed_fingerprint = struct.pack(">Q", didson_t._get_hash_recursive([]))
        return didson_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

