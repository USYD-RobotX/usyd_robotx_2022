"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class auv_global_planner_t(object):
    __slots__ = ["utime", "id", "command", "point1_x", "point1_y", "point1_z", "point1_att", "point2_x", "point2_y", "point2_z", "point2_att", "velocity", "timeout", "var_d", "var_i", "str"]

    GOTO = 0
    LEG = 1
    GRID = 2
    SPIRAL = 3
    ZAMBONIE = 4
    LOAD = 5
    RESUME = 6
    PAUSE = 7
    ABORT = 8
    STOP = 9
    SKIP = 10
    RESET = 11
    MISSION = 12

    def __init__(self):
        self.utime = 0
        self.id = 0
        self.command = 0
        self.point1_x = 0.0
        self.point1_y = 0.0
        self.point1_z = 0.0
        self.point1_att = [ 0.0 for dim0 in range(3) ]
        self.point2_x = 0.0
        self.point2_y = 0.0
        self.point2_z = 0.0
        self.point2_att = [ 0.0 for dim0 in range(3) ]
        self.velocity = [ 0.0 for dim0 in range(3) ]
        self.timeout = 0.0
        self.var_d = [ 0.0 for dim0 in range(2) ]
        self.var_i = [ 0 for dim0 in range(2) ]
        self.str = ""

    def encode(self):
        buf = BytesIO()
        buf.write(auv_global_planner_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qibddf", self.utime, self.id, self.command, self.point1_x, self.point1_y, self.point1_z))
        buf.write(struct.pack('>3f', *self.point1_att[:3]))
        buf.write(struct.pack(">ddf", self.point2_x, self.point2_y, self.point2_z))
        buf.write(struct.pack('>3f', *self.point2_att[:3]))
        buf.write(struct.pack('>3f', *self.velocity[:3]))
        buf.write(struct.pack(">f", self.timeout))
        buf.write(struct.pack('>2d', *self.var_d[:2]))
        buf.write(struct.pack('>2i', *self.var_i[:2]))
        __str_encoded = self.str.encode('utf-8')
        buf.write(struct.pack('>I', len(__str_encoded)+1))
        buf.write(__str_encoded)
        buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != auv_global_planner_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return auv_global_planner_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = auv_global_planner_t()
        self.utime, self.id, self.command, self.point1_x, self.point1_y, self.point1_z = struct.unpack(">qibddf", buf.read(33))
        self.point1_att = struct.unpack('>3f', buf.read(12))
        self.point2_x, self.point2_y, self.point2_z = struct.unpack(">ddf", buf.read(20))
        self.point2_att = struct.unpack('>3f', buf.read(12))
        self.velocity = struct.unpack('>3f', buf.read(12))
        self.timeout = struct.unpack(">f", buf.read(4))[0]
        self.var_d = struct.unpack('>2d', buf.read(16))
        self.var_i = struct.unpack('>2i', buf.read(8))
        __str_len = struct.unpack('>I', buf.read(4))[0]
        self.str = buf.read(__str_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if auv_global_planner_t in parents: return 0
        tmphash = (0x121a1bbdb0ab7336) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if auv_global_planner_t._packed_fingerprint is None:
            auv_global_planner_t._packed_fingerprint = struct.pack(">Q", auv_global_planner_t._get_hash_recursive([]))
        return auv_global_planner_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

