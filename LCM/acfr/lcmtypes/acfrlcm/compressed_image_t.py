"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class compressed_image_t(object):
    __slots__ = ["utime", "size", "is_rgb", "image"]

    def __init__(self):
        self.utime = 0
        self.size = 0
        self.is_rgb = 0
        self.image = ""

    def encode(self):
        buf = BytesIO()
        buf.write(compressed_image_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qiB", self.utime, self.size, self.is_rgb))
        buf.write(bytearray(self.image[:self.size]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != compressed_image_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return compressed_image_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = compressed_image_t()
        self.utime, self.size, self.is_rgb = struct.unpack(">qiB", buf.read(13))
        self.image = buf.read(self.size)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if compressed_image_t in parents: return 0
        tmphash = (0x4d99a31907cea02f) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if compressed_image_t._packed_fingerprint is None:
            compressed_image_t._packed_fingerprint = struct.pack(">Q", compressed_image_t._get_hash_recursive([]))
        return compressed_image_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

