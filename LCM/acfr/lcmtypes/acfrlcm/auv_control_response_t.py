"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class auv_control_response_t(object):
    __slots__ = ["utime", "x", "y", "depth", "heading", "pitch", "roll", "altitude", "goal_id", "time_to_goal", "dist_to_goal", "at_goal", "heading_mode", "transit_mode", "depth_mode"]

    MODE_OFF = 0
    MODE_ON = 1
    MODE_1P = 2
    MODE_2P = 3
    MODE_2PH = 4
    MODE_MAN = 5
    MODE_ALT = 6
    MODE_CLOOP = 7
    MODE_OLOOP = 8
    MODE_CLOOP_HOLD = 9
    MODE_CLOOP_CRAB = 10

    def __init__(self):
        self.utime = 0
        self.x = 0.0
        self.y = 0.0
        self.depth = 0.0
        self.heading = 0.0
        self.pitch = 0.0
        self.roll = 0.0
        self.altitude = 0.0
        self.goal_id = 0
        self.time_to_goal = 0.0
        self.dist_to_goal = 0.0
        self.at_goal = 0
        self.heading_mode = 0
        self.transit_mode = 0
        self.depth_mode = 0

    def encode(self):
        buf = BytesIO()
        buf.write(auv_control_response_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qdddddddiddibbb", self.utime, self.x, self.y, self.depth, self.heading, self.pitch, self.roll, self.altitude, self.goal_id, self.time_to_goal, self.dist_to_goal, self.at_goal, self.heading_mode, self.transit_mode, self.depth_mode))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != auv_control_response_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return auv_control_response_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = auv_control_response_t()
        self.utime, self.x, self.y, self.depth, self.heading, self.pitch, self.roll, self.altitude, self.goal_id, self.time_to_goal, self.dist_to_goal, self.at_goal, self.heading_mode, self.transit_mode, self.depth_mode = struct.unpack(">qdddddddiddibbb", buf.read(91))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if auv_control_response_t in parents: return 0
        tmphash = (0x8d738d7d8fbcda3c) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if auv_control_response_t._packed_fingerprint is None:
            auv_control_response_t._packed_fingerprint = struct.pack(">Q", auv_control_response_t._get_hash_recursive([]))
        return auv_control_response_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

