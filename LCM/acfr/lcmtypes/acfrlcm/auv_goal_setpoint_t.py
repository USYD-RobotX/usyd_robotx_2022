"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class auv_goal_setpoint_t(object):
    __slots__ = ["utime", "id", "str", "value", "mode", "x1", "y1", "z1", "x2", "y2", "z2", "heading", "xy_vel", "z_vel", "timeout"]

    MODE_GPT = 0
    MODE_TBS = 1
    MODE_CTL_MODE = 2
    MODE_CTL_NAVSRC = 3
    MODE_CTL_DOPR = 4
    MODE_OFF = 0
    MODE_ON = 1
    MODE_AUTO = 2
    MODE_1P_LINE = 3
    MODE_2P_LINE = 4
    MODE_2P_H_LINE = 5

    def __init__(self):
        self.utime = 0
        self.id = 0
        self.str = ""
        self.value = 0.0
        self.mode = 0
        self.x1 = 0.0
        self.y1 = 0.0
        self.z1 = 0.0
        self.x2 = 0.0
        self.y2 = 0.0
        self.z2 = 0.0
        self.heading = 0.0
        self.xy_vel = 0.0
        self.z_vel = 0.0
        self.timeout = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(auv_goal_setpoint_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.utime, self.id))
        __str_encoded = self.str.encode('utf-8')
        buf.write(struct.pack('>I', len(__str_encoded)+1))
        buf.write(__str_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">dbdddddddddd", self.value, self.mode, self.x1, self.y1, self.z1, self.x2, self.y2, self.z2, self.heading, self.xy_vel, self.z_vel, self.timeout))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != auv_goal_setpoint_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return auv_goal_setpoint_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = auv_goal_setpoint_t()
        self.utime, self.id = struct.unpack(">qi", buf.read(12))
        __str_len = struct.unpack('>I', buf.read(4))[0]
        self.str = buf.read(__str_len)[:-1].decode('utf-8', 'replace')
        self.value, self.mode, self.x1, self.y1, self.z1, self.x2, self.y2, self.z2, self.heading, self.xy_vel, self.z_vel, self.timeout = struct.unpack(">dbdddddddddd", buf.read(89))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if auv_goal_setpoint_t in parents: return 0
        tmphash = (0xb91ea1b55fb7fdfe) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if auv_goal_setpoint_t._packed_fingerprint is None:
            auv_goal_setpoint_t._packed_fingerprint = struct.pack(">Q", auv_goal_setpoint_t._get_hash_recursive([]))
        return auv_goal_setpoint_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

