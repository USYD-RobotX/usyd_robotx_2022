"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class auv_mission_command_t(object):
    __slots__ = ["utime", "message", "source", "depth_mode", "x", "y", "z", "velocity", "heading", "timeout", "str"]

    ABORT = 0
    GOTO = 1
    PAUSE = 2
    RESUME = 3
    RUN = 4
    LOAD = 5
    USBL_PING = 6
    USBL_FIX = 7
    STOP = 8
    NETWORK = 0
    LQ_MODEM = 1
    DEPTH_NONE = 0
    DEPTH_DEPTH = 1
    DEPTH_ALT = 2

    def __init__(self):
        self.utime = 0
        self.message = 0
        self.source = 0
        self.depth_mode = 0
        self.x = 0.0
        self.y = 0.0
        self.z = 0.0
        self.velocity = [ 0.0 for dim0 in range(3) ]
        self.heading = 0.0
        self.timeout = 0.0
        self.str = ""

    def encode(self):
        buf = BytesIO()
        buf.write(auv_mission_command_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qbbbddd", self.utime, self.message, self.source, self.depth_mode, self.x, self.y, self.z))
        buf.write(struct.pack('>3d', *self.velocity[:3]))
        buf.write(struct.pack(">dd", self.heading, self.timeout))
        __str_encoded = self.str.encode('utf-8')
        buf.write(struct.pack('>I', len(__str_encoded)+1))
        buf.write(__str_encoded)
        buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != auv_mission_command_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return auv_mission_command_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = auv_mission_command_t()
        self.utime, self.message, self.source, self.depth_mode, self.x, self.y, self.z = struct.unpack(">qbbbddd", buf.read(35))
        self.velocity = struct.unpack('>3d', buf.read(24))
        self.heading, self.timeout = struct.unpack(">dd", buf.read(16))
        __str_len = struct.unpack('>I', buf.read(4))[0]
        self.str = buf.read(__str_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if auv_mission_command_t in parents: return 0
        tmphash = (0x7cb83300770debe7) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if auv_mission_command_t._packed_fingerprint is None:
            auv_mission_command_t._packed_fingerprint = struct.pack(">Q", auv_mission_command_t._get_hash_recursive([]))
        return auv_mission_command_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

