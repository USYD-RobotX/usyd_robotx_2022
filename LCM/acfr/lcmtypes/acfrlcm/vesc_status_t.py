"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class vesc_status_t(object):
    __slots__ = ["utime", "input_voltage", "input_current", "control_temperature", "motor_current", "motor_temperature", "RPM", "duty", "fault_code"]

    def __init__(self):
        self.utime = 0
        self.input_voltage = 0.0
        self.input_current = 0.0
        self.control_temperature = 0.0
        self.motor_current = 0.0
        self.motor_temperature = 0.0
        self.RPM = 0.0
        self.duty = 0.0
        self.fault_code = ""

    def encode(self):
        buf = BytesIO()
        buf.write(vesc_status_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qddddddd", self.utime, self.input_voltage, self.input_current, self.control_temperature, self.motor_current, self.motor_temperature, self.RPM, self.duty))
        __fault_code_encoded = self.fault_code.encode('utf-8')
        buf.write(struct.pack('>I', len(__fault_code_encoded)+1))
        buf.write(__fault_code_encoded)
        buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != vesc_status_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return vesc_status_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = vesc_status_t()
        self.utime, self.input_voltage, self.input_current, self.control_temperature, self.motor_current, self.motor_temperature, self.RPM, self.duty = struct.unpack(">qddddddd", buf.read(64))
        __fault_code_len = struct.unpack('>I', buf.read(4))[0]
        self.fault_code = buf.read(__fault_code_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if vesc_status_t in parents: return 0
        tmphash = (0xc75af8616a4b93c3) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if vesc_status_t._packed_fingerprint is None:
            vesc_status_t._packed_fingerprint = struct.pack(">Q", vesc_status_t._get_hash_recursive([]))
        return vesc_status_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

