"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class auv_bluefin_tail_status_t(object):
    __slots__ = ["utime", "tail_utime", "voltage", "current", "psu_temp", "tail_temp", "comp1", "comp2", "leak", "current_rpm", "target_rpm", "current_rudder", "target_rudder", "current_elevator", "target_elevator"]

    def __init__(self):
        self.utime = 0
        self.tail_utime = 0
        self.voltage = 0.0
        self.current = 0.0
        self.psu_temp = 0.0
        self.tail_temp = 0
        self.comp1 = 0
        self.comp2 = 0
        self.leak = 0
        self.current_rpm = 0.0
        self.target_rpm = 0.0
        self.current_rudder = 0.0
        self.target_rudder = 0.0
        self.current_elevator = 0.0
        self.target_elevator = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(auv_bluefin_tail_status_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qqdddbbbbdddddd", self.utime, self.tail_utime, self.voltage, self.current, self.psu_temp, self.tail_temp, self.comp1, self.comp2, self.leak, self.current_rpm, self.target_rpm, self.current_rudder, self.target_rudder, self.current_elevator, self.target_elevator))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != auv_bluefin_tail_status_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return auv_bluefin_tail_status_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = auv_bluefin_tail_status_t()
        self.utime, self.tail_utime, self.voltage, self.current, self.psu_temp, self.tail_temp, self.comp1, self.comp2, self.leak, self.current_rpm, self.target_rpm, self.current_rudder, self.target_rudder, self.current_elevator, self.target_elevator = struct.unpack(">qqdddbbbbdddddd", buf.read(92))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if auv_bluefin_tail_status_t in parents: return 0
        tmphash = (0x95b956c123a90270) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if auv_bluefin_tail_status_t._packed_fingerprint is None:
            auv_bluefin_tail_status_t._packed_fingerprint = struct.pack(">Q", auv_bluefin_tail_status_t._get_hash_recursive([]))
        return auv_bluefin_tail_status_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

