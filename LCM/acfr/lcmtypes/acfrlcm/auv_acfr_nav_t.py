"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class auv_acfr_nav_t(object):
    __slots__ = ["utime", "latitude", "longitude", "x", "y", "depth", "roll", "pitch", "heading", "vx", "vy", "vz", "rollRate", "pitchRate", "headingRate", "altitude", "fwd_obstacle_dist"]

    def __init__(self):
        self.utime = 0
        self.latitude = 0.0
        self.longitude = 0.0
        self.x = 0.0
        self.y = 0.0
        self.depth = 0.0
        self.roll = 0.0
        self.pitch = 0.0
        self.heading = 0.0
        self.vx = 0.0
        self.vy = 0.0
        self.vz = 0.0
        self.rollRate = 0.0
        self.pitchRate = 0.0
        self.headingRate = 0.0
        self.altitude = 0.0
        self.fwd_obstacle_dist = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(auv_acfr_nav_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qdddddddddddddddd", self.utime, self.latitude, self.longitude, self.x, self.y, self.depth, self.roll, self.pitch, self.heading, self.vx, self.vy, self.vz, self.rollRate, self.pitchRate, self.headingRate, self.altitude, self.fwd_obstacle_dist))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != auv_acfr_nav_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return auv_acfr_nav_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = auv_acfr_nav_t()
        self.utime, self.latitude, self.longitude, self.x, self.y, self.depth, self.roll, self.pitch, self.heading, self.vx, self.vy, self.vz, self.rollRate, self.pitchRate, self.headingRate, self.altitude, self.fwd_obstacle_dist = struct.unpack(">qdddddddddddddddd", buf.read(136))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if auv_acfr_nav_t in parents: return 0
        tmphash = (0xc35f3a0d671cf7c6) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if auv_acfr_nav_t._packed_fingerprint is None:
            auv_acfr_nav_t._packed_fingerprint = struct.pack(">Q", auv_acfr_nav_t._get_hash_recursive([]))
        return auv_acfr_nav_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

