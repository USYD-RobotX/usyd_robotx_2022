"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class auv_cpu_voltage_monitor_t(object):
    __slots__ = ["utime", "num_readings", "names", "volt_readings"]

    def __init__(self):
        self.utime = 0
        self.num_readings = 0
        self.names = []
        self.volt_readings = []

    def encode(self):
        buf = BytesIO()
        buf.write(auv_cpu_voltage_monitor_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qb", self.utime, self.num_readings))
        for i0 in range(self.num_readings):
            __names_encoded = self.names[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__names_encoded)+1))
            buf.write(__names_encoded)
            buf.write(b"\0")
        buf.write(struct.pack('>%dd' % self.num_readings, *self.volt_readings[:self.num_readings]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != auv_cpu_voltage_monitor_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return auv_cpu_voltage_monitor_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = auv_cpu_voltage_monitor_t()
        self.utime, self.num_readings = struct.unpack(">qb", buf.read(9))
        self.names = []
        for i0 in range(self.num_readings):
            __names_len = struct.unpack('>I', buf.read(4))[0]
            self.names.append(buf.read(__names_len)[:-1].decode('utf-8', 'replace'))
        self.volt_readings = struct.unpack('>%dd' % self.num_readings, buf.read(self.num_readings * 8))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if auv_cpu_voltage_monitor_t in parents: return 0
        tmphash = (0x3cdf248b8b907394) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if auv_cpu_voltage_monitor_t._packed_fingerprint is None:
            auv_cpu_voltage_monitor_t._packed_fingerprint = struct.pack(">Q", auv_cpu_voltage_monitor_t._get_hash_recursive([]))
        return auv_cpu_voltage_monitor_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

