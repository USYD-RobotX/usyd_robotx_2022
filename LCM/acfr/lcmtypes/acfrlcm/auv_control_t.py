"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class auv_control_t(object):
    __slots__ = ["utime", "depth_mode", "run_mode", "heading", "depth", "altitude", "pitch", "vx"]

    DEPTH_MODE = 0
    ALTITUDE_MODE = 1
    PITCH_MODE = 2
    STOP = 0
    RUN = 1
    DIVE = 3

    def __init__(self):
        self.utime = 0
        self.depth_mode = 0
        self.run_mode = 0
        self.heading = 0.0
        self.depth = 0.0
        self.altitude = 0.0
        self.pitch = 0.0
        self.vx = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(auv_control_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qbbddddd", self.utime, self.depth_mode, self.run_mode, self.heading, self.depth, self.altitude, self.pitch, self.vx))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != auv_control_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return auv_control_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = auv_control_t()
        self.utime, self.depth_mode, self.run_mode, self.heading, self.depth, self.altitude, self.pitch, self.vx = struct.unpack(">qbbddddd", buf.read(50))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if auv_control_t in parents: return 0
        tmphash = (0x1fb07b37fb40d454) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if auv_control_t._packed_fingerprint is None:
            auv_control_t._packed_fingerprint = struct.pack(">Q", auv_control_t._get_hash_recursive([]))
        return auv_control_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

