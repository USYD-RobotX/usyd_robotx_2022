"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class auv_base_pid_t(object):
    __slots__ = ["kp", "ki", "kd", "integral", "derivative", "prev_error", "error", "sat"]

    def __init__(self):
        self.kp = 0.0
        self.ki = 0.0
        self.kd = 0.0
        self.integral = 0.0
        self.derivative = 0.0
        self.prev_error = 0.0
        self.error = 0.0
        self.sat = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(auv_base_pid_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">dddddddd", self.kp, self.ki, self.kd, self.integral, self.derivative, self.prev_error, self.error, self.sat))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != auv_base_pid_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return auv_base_pid_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = auv_base_pid_t()
        self.kp, self.ki, self.kd, self.integral, self.derivative, self.prev_error, self.error, self.sat = struct.unpack(">dddddddd", buf.read(64))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if auv_base_pid_t in parents: return 0
        tmphash = (0x2cd8b1b7a5f5ab2b) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if auv_base_pid_t._packed_fingerprint is None:
            auv_base_pid_t._packed_fingerprint = struct.pack(">Q", auv_base_pid_t._get_hash_recursive([]))
        return auv_base_pid_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

