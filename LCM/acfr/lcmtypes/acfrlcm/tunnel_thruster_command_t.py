"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class tunnel_thruster_command_t(object):
    __slots__ = ["utime", "fore_horiz", "fore_vert", "aft_horiz", "aft_vert"]

    def __init__(self):
        self.utime = 0
        self.fore_horiz = 0
        self.fore_vert = 0
        self.aft_horiz = 0
        self.aft_vert = 0

    def encode(self):
        buf = BytesIO()
        buf.write(tunnel_thruster_command_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qhhhh", self.utime, self.fore_horiz, self.fore_vert, self.aft_horiz, self.aft_vert))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != tunnel_thruster_command_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return tunnel_thruster_command_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = tunnel_thruster_command_t()
        self.utime, self.fore_horiz, self.fore_vert, self.aft_horiz, self.aft_vert = struct.unpack(">qhhhh", buf.read(16))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if tunnel_thruster_command_t in parents: return 0
        tmphash = (0xf23b66dac67f1769) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if tunnel_thruster_command_t._packed_fingerprint is None:
            tunnel_thruster_command_t._packed_fingerprint = struct.pack(">Q", tunnel_thruster_command_t._get_hash_recursive([]))
        return tunnel_thruster_command_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

